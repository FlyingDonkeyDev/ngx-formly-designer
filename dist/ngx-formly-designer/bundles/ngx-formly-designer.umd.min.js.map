{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-formly-designer/lib/wrappers/designer.ts","ng://ngx-formly-designer/lib/formly-designer-config.ts","ng://ngx-formly-designer/lib/util.ts","ng://ngx-formly-designer/lib/fields.service.ts","ng://ngx-formly-designer/lib/formly-designer.service.ts","ng://ngx-formly-designer/lib/wrappers/field-designer.ts","ng://ngx-formly-designer/lib/wrappers/field-group-designer.ts","ng://ngx-formly-designer/lib/run/designer.ts","ng://ngx-formly-designer/lib/config.ts","ng://ngx-formly-designer/lib/formly-designer.component.ts","ng://ngx-formly-designer/lib/components/field-editor.ts","ng://ngx-formly-designer/lib/components/field-picker.ts","ng://ngx-formly-designer/lib/components/type-select.ts","ng://ngx-formly-designer/lib/components/wrapper-editor.ts","ng://ngx-formly-designer/lib/components/wrapper-select.ts","ng://ngx-formly-designer/lib/components/wrapper-picker.ts","ng://ngx-formly-designer/lib/components/wrappers-picker.ts","ng://ngx-formly-designer/lib/json-helper.ts","ng://ngx-formly-designer/lib/pipes/decycle.ts","ng://ngx-formly-designer/lib/formly-designer.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","FormlyDesignerWrapperComponent","tslib_1.__extends","Component","args","selector","template","ViewChild","read","ViewContainerRef","FieldWrapper","FORMLY_DESIGNER_CONFIG_TOKEN","InjectionToken","FormlyDesignerConfig","configs","formlyConfig","_this","types","wrappers","settings","showClassName","forEach","config","addConfig","setSettings","setType","setWrapper","undefined","options","isArray","option","getType","name","type","fieldArray","fieldGroup","fields","getWrapper","wrapper","Injectable","Inject","FormlyConfig","keyPathMemberName","getKeyPath","field","key","keyPath","pathElements","split","pathElements_1","tslib_1.__values","pathElements_1_1","pathElement","replace","concat","push","test","parseInt","path","slice","traverseFields","callback","parent","fields_1","fields_1_1","isObject","val","isString","String","FieldsService","formlyDesignerConfig","getFullKeyPath","parents_1","Map","f","set","cur","get","getTypeFields","getFields","getWrapperFields","checkField","fullPathByField","newPath","equalType","a","mutateField","designerField","templateOptions","$designerField","mutateFields","designerFields","designerOption","getDesignerOptions","cloneDeep","FormlyDesignerService","designerConfig","fieldsService","_disabled","BehaviorSubject","_fields","_model","defineProperty","asObservable","createPrunedFields","addField","model","removeField","unsetField","replaceField","removeControl","formControl","updateField","original","modified","pruned","createPrunedField","convertField","convertFields","createDesignerFields","prunedFields","keys","getWrappers","clonedField","filterWrapper","filter","w","typeWrappers","templateManipulators","preWrapper","map","postWrapper","j","splice","className","designerType","toString","r","_1","isEmpty","applyProperties","fieldGroupClassName","trim","designerWrapperFields","reduce","previous","current","designed","defaultValue","l","replaceFieldArray","buildPath","arrayNext","control","includeSelf","child","parent_1","FormGroup","controls","FormArray","at","unset","removeAt","FormlyDesignerFieldWrapperComponent","changeDetector","elementRef","formlyDesignerService","zone","_super","editing","fieldEdit","FormControl","fieldWrappers","ngOnInit","getOwnPropertyNames","ngAfterContentInit","runOutsideAngular","setTimeout","checkDesigner","ngAfterContentChecked","disabled","addWrapper","removeWrapper","index","edit","setValue","remove","accept","timer","subscribe","cancel","element","parentNode","designerEmpty","querySelector","classList","contains","detectChanges","add","ChangeDetectorRef","ElementRef","NgZone","FormlyDesignerFieldGroupWrapperComponent","$fieldArray","onFieldSelected","updatedField","pipe","tap","catchError","NEVER","TemplateDesigner","isNonDesignerField","run","fc","fieldComponents","wrapperComponents","component","manipulators","class","method","FormlyDesignerComponent","formBuilder","fieldsChange","EventEmitter","modelChange","properties","debugFields","subscriptions","form","group","fields$","emit","merge","model$","valueChanges","debounceTime","ngOnDestroy","subscription","unsubscribe","encapsulation","ViewEncapsulation","None","providers","FormBuilder","Output","Input","FIELD_EDITOR_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","FieldEditorComponent","multi","fb","onChange","_","onTouched","validator","fieldForm","onTypeChange","statusChanges","invalid","subscribeValueChanges","valueChangesSubscription","writeValue","obj","markAsPristine","markAsUntouched","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disable","enable","updateValue","assign","onWrappersSelected","hasType","result","showType","conflict","FieldPickerComponent","selected","Validators","compose","required","pattern","$","modalRef","nativeElement","$modal","modal","onApply","TYPE_SELECT_CONTROL_VALUE_ACCESSOR","TypeSelectComponent","ngAfterViewInit","WRAPPER_EDITOR_CONTROL_VALUE_ACCESSOR","WrapperEditorComponent","switchMap","ngOnChanges","changes","WRAPPER_SELECT_CONTROL_VALUE_ACCESSOR","WrapperSelectComponent","WrapperPickerComponent","WrappersPickerComponent","currentValue","onWrapperSelected","fieldWrappersIndex","indexOf","decycle","nextId","objects","traverse","v","has","id","$id","$ref","traverseValue","bind","replacement","DecyclePipe","transform","Pipe","FormlyDesignerModule","forRoot","ngModule","ANALYZE_FOR_ENTRY_COMPONENTS","useValue","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","FormlyModule","forChild","exports","entryComponents","FormlyForm"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n    selector: 'formly-designer-wrapper',\n    template: `\n        <ng-template #fieldComponent></ng-template>\n    `\n})\nexport class FormlyDesignerWrapperComponent extends FieldWrapper {\n    @ViewChild('fieldComponent', { read: ViewContainerRef }) fieldComponent: ViewContainerRef;\n}\n","import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { FormlyConfig, FormlyFieldConfig } from '@ngx-formly/core';\n\nexport const FORMLY_DESIGNER_CONFIG_TOKEN = new InjectionToken<string>('FORMLY_DESIGNER_CONFIG_TOKEN');\n\n@Injectable()\nexport class FormlyDesignerConfig {\n    constructor(\n        @Inject(FORMLY_DESIGNER_CONFIG_TOKEN) configs: DesignerConfigOption[] = [],\n        private formlyConfig: FormlyConfig\n    ) {\n        configs.forEach(config => this.addConfig(config));\n    }\n\n    types: {[name: string]: DesignerTypeOption} = {};\n    wrappers: {[name: string]: DesignerOption} = {};\n    settings: DesignerSettings = { showClassName: true };\n\n    addConfig(config: DesignerConfigOption): void {\n        if (config.settings) {\n            this.setSettings(config.settings);\n        }\n        if (config.types) {\n            this.setType(config.types);\n        }\n        if (config.wrappers) {\n            this.setWrapper(config.wrappers);\n        }\n    }\n\n    setSettings(settings: DesignerSettings): void {\n        if (settings.showClassName !== undefined) {\n            this.settings.showClassName = !!settings.showClassName;\n        }\n    }\n\n    setType(options: DesignerTypeOption | DesignerTypeOption[]): void {\n        if (Array.isArray(options)) {\n            options.forEach((option) => {\n                this.setType(option);\n            });\n        } else {\n            // Throw if type isn't part of the formly config\n            this.formlyConfig.getType(options.name);\n\n            if (!this.types[options.name]) {\n                this.types[options.name] = <DesignerTypeOption>{};\n            }\n\n            const type = this.types[options.name];\n            type.name = options.name;\n            type.fieldArray = !!options.fieldArray;\n            type.fieldGroup = !!options.fieldGroup;\n            type.fields = options.fields;\n        }\n    }\n\n    setWrapper(options: DesignerOption | DesignerOption[]): void {\n        if (Array.isArray(options)) {\n            options.forEach((option) => {\n                this.setWrapper(option);\n            });\n        } else {\n            // Throw if wrapper isn't part of the formly config\n            this.formlyConfig.getWrapper(options.name);\n\n            if (!this.wrappers[options.name]) {\n                this.wrappers[options.name] = <DesignerOption>{};\n            }\n\n            const wrapper = this.wrappers[options.name];\n            wrapper.name = options.name;\n            wrapper.fields = options.fields;\n        }\n    }\n}\n\nexport interface DesignerOption {\n    name: string;\n    fields?: FormlyFieldConfig[];\n}\n\nexport interface DesignerTypeOption extends DesignerOption {\n    fieldArray?: boolean;\n    fieldGroup?: boolean;\n}\n\nexport interface DesignerSettings {\n    showClassName?: boolean;\n    filterWrapper?: (wrapper: string, field: FormlyFieldConfig) => boolean;\n}\n\nexport interface DesignerConfigOption {\n    settings?: DesignerSettings;\n    types?: DesignerTypeOption[];\n    wrappers?: DesignerOption[];\n}\n","import { FormlyFieldConfig } from '@ngx-formly/core';\n\nexport { cloneDeep, get, set, unset } from 'lodash-es';\n\nconst keyPathMemberName = '_formlyDesignerKeyPath';\n\n// Source: https://github.com/formly-js/ngx-formly/blob/master/src/core/src/lib/utils.ts\nexport function getKeyPath(field: { key?: string | string[], fieldGroup?: any, fieldArray?: any }): (string | number)[] {\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (!(<any>field)[keyPathMemberName] || (<any>field)[keyPathMemberName].key !== field.key) {\n        let keyPath: (string | number)[] = [];\n        if (field.key) {\n            /* Also allow for an array key, hence the type check  */\n            const pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n            for (let pathElement of pathElements) {\n                if (typeof pathElement === 'string') {\n                    /* replace paths of the form names[2] by names.2, cfr. angular formly */\n                    pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n                    keyPath = keyPath.concat(pathElement.split('.'));\n                } else {\n                    keyPath.push(pathElement);\n                }\n            }\n            for (let i = 0; i < keyPath.length; i++) {\n                const pathElement = keyPath[i];\n                if (typeof pathElement === 'string' && /^\\d+$/.test(pathElement)) {\n                    keyPath[i] = parseInt(pathElement, 10);\n                }\n            }\n        }\n        (<any>field)[keyPathMemberName] = {\n            key: field.key,\n            path: keyPath,\n        };\n    }\n\n    return (<any>field)[keyPathMemberName].path.slice();\n}\n\n\nexport function equalType(a: FormlyFieldConfig, b: FormlyFieldConfig): boolean {\n    return (!a.fieldArray === !b.fieldArray) && (!a.fieldGroup === !b.fieldGroup);\n}\n\nexport function traverseFields(fields: FormlyFieldConfig[],\n    callback: (field: FormlyFieldConfig, path?: (string | number)[], parent?: FormlyFieldConfig) => boolean | any,\n    path?: (string | number)[],\n    parent?: FormlyFieldConfig): boolean | any {\n    path = path || [];\n    for (const field of fields) {\n        if (callback(field, path, parent)) {\n            return true;\n        }\n        if (field.fieldArray) {\n            if (traverseFields([field.fieldArray], callback, path.concat(getKeyPath(field)), field)) {\n                return true;\n            }\n        } else if (field.fieldGroup) {\n            if (traverseFields(field.fieldGroup, callback, path.concat(getKeyPath(field)), field)) {\n                return true;\n            }\n        }\n    }\n}\n\n// https://stackoverflow.com/a/40294058\n// export const cloneDeep = (obj, hash = new WeakMap()): typeof obj => {\n//   if (Object(obj) !== obj) return obj; // primitives\n//   if (hash.has(obj)) return hash.get(obj); // cyclic reference\n//   const result = obj instanceof Date ? new Date(obj)\n//     : obj instanceof RegExp ? new RegExp(obj.source, obj.flags)\n//       : obj.constructor ? new obj.constructor()\n//         : Object.create(null);\n//   hash.set(obj, result);\n//   if (obj instanceof Map)\n//     Array.from(obj, ([key, val]) => result.set(key, cloneDeep(val, hash)));\n//   return Object.assign(result, ...Object.keys(obj).map(\n//     key => ({ [key]: cloneDeep(obj[key], hash) })));\n// };\n\nexport const isArray = Array.isArray;\n\n\n// https://stackoverflow.com/a/28953167\nexport const isEmpty = (val: any): boolean => {\n    if (val === undefined)\n        return true;\n\n    else if (typeof (val) === 'function' || typeof (val) === 'number' || typeof (val) === 'boolean'\n        || Object.prototype.toString.call(val) === '[object Date]')\n        return false;\n\n    else if (val == null || val.length === 0)        // null or 0 length array\n        return true;\n\n    else if (typeof (val) === 'object') {\n        // empty object\n\n        let r;\n\n        for (const _ in val)\n            r = false;\n\n        return r;\n    }\n\n    return false;\n};\n\nexport const isFunction = (val: any): boolean => typeof val === 'function';\n\nexport const isObject = (val: any): boolean => typeof val === 'object' && val != null;\n\nexport const isString = (val: any): boolean => typeof val === 'string' || val instanceof String;\n","import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { DesignerOption, FormlyDesignerConfig } from './formly-designer-config';\nimport { cloneDeep, equalType, getKeyPath, isObject, traverseFields } from './util';\n\n@Injectable()\nexport class FieldsService {\n    constructor(\n        private formlyDesignerConfig: FormlyDesignerConfig\n    ) { }\n\n    getFullKeyPath(field: FormlyFieldConfig, fields: FormlyFieldConfig[]): (string | number)[] {\n        let keyPath = [];\n        if (field && field.key) {\n            const parents = new Map<FormlyFieldConfig, FormlyFieldConfig>();\n            traverseFields(fields, (f, path, parent) => {\n                parents.set(f, parent);\n            });\n\n            keyPath = getKeyPath(field);\n            let cur = parents.get(field);\n            while (cur) {\n                keyPath = getKeyPath(cur).concat(keyPath);\n                cur = parents.get(cur);\n            }\n        }\n        return keyPath;\n    }\n\n    getTypeFields(type: string): FormlyFieldConfig[] {\n        return this.getFields(type, 'type');\n    }\n\n    getWrapperFields(wrapper: string): FormlyFieldConfig[] {\n        return this.getFields(wrapper, 'wrapper');\n    }\n\n    /** Check the field for control type conflict */\n    checkField(field: FormlyFieldConfig, fields: FormlyFieldConfig[], parent?: FormlyFieldConfig): boolean {\n        const fullPathByField = new Map<FormlyFieldConfig, (string | number)[]>();\n\n        const newPath = this.getFullKeyPath(parent || {}, fields).concat(getKeyPath(field));\n        const length = newPath.length;\n        return !traverseFields(fields, (f, p) => {\n            const path = fullPathByField.get(f) || fullPathByField.set(f, (p || []).concat(getKeyPath(f))).get(f);\n            if (path.length !== length) {\n                return;\n            }\n            for (let i = 0; i < length; i++) {\n                if (path[i] !== newPath[i]) {\n                    return;\n                }\n            }\n            return !equalType(field, f);\n        });\n    }\n\n    mutateField(field: FormlyFieldConfig, designerField: boolean): FormlyFieldConfig {\n        if (isObject(field.templateOptions)) {\n            field.templateOptions['$designerField'] = designerField;\n        } else {\n            field.templateOptions = { $designerField: designerField };\n        }\n        if (field.fieldGroup) {\n            this.mutateFields(field.fieldGroup, designerField);\n        } else if (field.fieldArray && field.fieldArray.fieldGroup) {\n            if (designerField) {\n                this.mutateField(field.fieldArray, designerField);\n            } else {\n                // Treating fieldArrays as fieldGroups\n                field.templateOptions['$fieldArray'] = { type: field.type };\n                field.fieldGroup = field.fieldArray.fieldGroup;\n                delete field.fieldArray;\n                delete field.type;\n\n                this.mutateFields(field.fieldGroup, designerField);\n            }\n        }\n        return field;\n    }\n\n    mutateFields(fields: FormlyFieldConfig[], designerFields: boolean): void {\n        fields.forEach(field => this.mutateField(field, designerFields));\n    }\n\n    private getFields(name: string, type: string): FormlyFieldConfig[] {\n        const designerOption = (name ? this.getDesignerOptions(type)[name] || {} : {}) as DesignerOption;\n        const fields = cloneDeep(designerOption.fields || []);\n        this.mutateFields(fields, true);\n        return fields;\n    }\n\n    private getDesignerOptions(type: string): { [name: string]: DesignerOption } {\n        if (type === 'type') {\n            return this.formlyDesignerConfig.types;\n        }\n        if (type === 'wrapper') {\n            return this.formlyDesignerConfig.wrappers;\n        }\n        return {};\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\nimport { FieldsService } from './fields.service';\nimport { FormlyConfig, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyDesignerConfig } from './formly-designer-config';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { cloneDeep, get, isArray, isEmpty, isFunction, isString, set, unset } from './util';\n\n@Injectable()\nexport class FormlyDesignerService {\n  constructor(\n    private designerConfig: FormlyDesignerConfig,\n    private fieldsService: FieldsService,\n    private formlyConfig: FormlyConfig\n  ) { }\n\n  private readonly _disabled = new BehaviorSubject<boolean>(false);\n  private readonly _fields = new BehaviorSubject<FormlyFieldConfig[]>([]);\n  private readonly _model = new BehaviorSubject<any>({});\n\n  get disabled(): boolean {\n    return this._disabled.value;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled.next(!!value);\n  }\n\n  get disabled$(): Observable<boolean> {\n    return this._disabled.asObservable();\n  }\n\n  get fields(): FormlyFieldConfig[] {\n    return this._fields.value;\n  }\n\n  set fields(value: FormlyFieldConfig[]) {\n    // Prune the fields because ngx-formly pollutes them with internal state\n    // causing incorrect behavior when re-applied.\n    const fields = this.createPrunedFields(isArray(value) ? value : []);\n    this._fields.next(fields);\n  }\n\n  get fields$(): Observable<FormlyFieldConfig[]> {\n    return this._fields.asObservable();\n  }\n\n  get model(): any {\n    return this._model.value;\n  }\n\n  set model(value: any) {\n    this._model.next(value == null ? {} : value);\n  }\n\n  get model$(): Observable<any> {\n    return this._model.asObservable();\n  }\n\n  addField(field: FormlyFieldConfig): void {\n    this.fieldsService.mutateField(field, false);\n\n    const fields = cloneDeep(this.fields);\n    fields.push(field);\n\n    this.fields = fields;\n    this.model = cloneDeep(this.model);\n  }\n\n  removeField(field: FormlyFieldConfig): void {\n    this.unsetField(field);\n    if (this.replaceField(this.fields, field, undefined)) {\n      this.removeControl(field.formControl);\n    }\n\n    this.fields = cloneDeep(this.fields);\n    this.model = cloneDeep(this.model);\n  }\n\n  updateField(original: FormlyFieldConfig, modified: FormlyFieldConfig): void {\n    const pruned = this.fieldsService.mutateField(this.createPrunedField(modified), false);\n\n    if (this.replaceField(this.fields, original, pruned)) {\n      if (original.formControl !== pruned.formControl) {\n        this.unsetField(original);\n        this.removeControl(original.formControl);\n      }\n\n      this.fields = cloneDeep(this.fields);\n      this.model = cloneDeep(this.model);\n    }\n  }\n\n  convertField(field: FormlyFieldConfig): FormlyFieldConfig {\n    return this.createPrunedField(field);\n  }\n\n  convertFields(fields: FormlyFieldConfig[]): FormlyFieldConfig[] {\n    return this.createPrunedFields(fields);\n  }\n\n  createDesignerFields(): FormlyFieldConfig[] {\n    return this.createPrunedFields(this.fields);\n  }\n\n  private createPrunedFields(fields: FormlyFieldConfig[]): FormlyFieldConfig[] {\n    const prunedFields: FormlyFieldConfig[] = [];\n    if (isArray(fields)) {\n      fields.forEach(field => {\n        const pruned = this.createPrunedField(field);\n        if (field.fieldArray) {\n          pruned.fieldArray = this.createPrunedField(field.fieldArray);\n        } else if (field.fieldGroup && !pruned.fieldArray) {\n          pruned.fieldGroup = this.createPrunedFields(field.fieldGroup);\n        }\n        if (Object.keys(pruned).length > 0) {\n          prunedFields.push(pruned);\n        }\n      });\n    }\n    return prunedFields;\n  }\n\n  getWrappers(field: FormlyFieldConfig): string[] {\n    if (!field || !isArray(field.wrappers)) {\n      return [];\n    }\n\n    const clonedField = cloneDeep(field);\n    let wrappers = clonedField.wrappers = (clonedField.wrappers || []);\n    if (isFunction(this.designerConfig.settings.filterWrapper)) {\n      wrappers = wrappers.filter(w => this.designerConfig.settings.filterWrapper(w, clonedField));\n    }\n\n    // Determine wrappers part of the formly configuration (static and dynamic) to exclude them from the result\n    const staticWrappers = field.type ? this.formlyConfig.getType(field.type).wrappers || [] : [];\n    const typeWrappers = staticWrappers\n      .concat(this.formlyConfig.templateManipulators.preWrapper.map(m => m(clonedField)))\n      .concat(this.formlyConfig.templateManipulators.postWrapper.map(m => m(clonedField)))\n      .filter(w => w);\n\n    // Remove wrappers part of the formly configuration from the result\n    if (typeWrappers.length > 0) {\n      for (let i = wrappers.length - 1; i >= 0; i--) {\n        for (let j = typeWrappers.length - 1; j >= 0; j--) {\n          if (wrappers[i] === typeWrappers[j]) {\n            typeWrappers.splice(j, 1);\n            wrappers.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  /** Prunes the field of paths not identified in the designer config */\n  private createPrunedField(field: FormlyFieldConfig): FormlyFieldConfig {\n    const type = get(field, 'templateOptions.$fieldArray.type', field.type);\n    const designerType = this.designerConfig.types[type];\n    const pruned: FormlyFieldConfig = isEmpty(field.key) ? {} : { key: field.key };\n\n    if (designerType) {\n      pruned.type = type;\n      this.applyProperties(field, pruned, designerType.fields);\n      if (designerType.fieldArray) {\n        pruned.fieldArray = {\n          fieldGroup: this.createPrunedFields(field.fieldGroup)\n        };\n      }\n    }\n\n    if (isArray(field.fieldGroup) && !isArray(pruned.fieldArray)) {\n      pruned.fieldGroup = this.createPrunedFields(field.fieldGroup);\n\n      let fieldGroupClassName: string;\n      if (isString(field.fieldGroupClassName) && (fieldGroupClassName = field.fieldGroupClassName.trim()).length > 0) {\n        pruned.fieldGroupClassName = fieldGroupClassName;\n      }\n    }\n\n    let className: string;\n    if (isString(field.className) && (className = field.className.trim()).length > 0) {\n      pruned.className = className;\n    }\n\n    const wrappers = this.getWrappers(field);\n    if (wrappers.length > 0) {\n      pruned.wrappers = wrappers;\n      const designerWrapperFields = wrappers.map(wrapper => this.designerConfig.wrappers[wrapper])\n        .filter(designerOption => designerOption && isArray(designerOption.fields))\n        .reduce<FormlyFieldConfig[]>((previous, current) => previous.concat(current.fields), []);\n      this.applyProperties(field, pruned, designerWrapperFields);\n    }\n    return pruned;\n  }\n\n  private applyProperties(field: FormlyFieldConfig, designed: FormlyFieldConfig, designerFields: FormlyFieldConfig[]): void {\n    if (isArray(designerFields)) {\n      designerFields.forEach(designerField => {\n        const value = get(field, designerField.key);\n        if (value != null && (!isString(value) || value.length > 0) && value !== designerField.defaultValue) {\n          set(designed, designerField.key, value);\n        }\n      });\n    }\n  }\n\n  private replaceField(fields: FormlyFieldConfig[], original: FormlyFieldConfig, modified: FormlyFieldConfig): boolean {\n    if (isArray(fields)) {\n      const l = fields.length;\n      for (let i = 0; i < l; i++) {\n        const field = fields[i];\n        if (field === original) {\n          if (modified == null) {\n            fields.splice(i, 1);\n          } else {\n            fields[i] = modified;\n          }\n          return true;\n        }\n        if (field.fieldGroup && this.replaceField(field.fieldGroup, original, modified)) {\n          return true;\n        }\n        if (field.fieldArray && this.replaceFieldArray(field, original, modified)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private replaceFieldArray(parent: FormlyFieldConfig, original: FormlyFieldConfig, modified: FormlyFieldConfig): boolean {\n    const fieldArray = parent.fieldArray;\n    if (fieldArray === original) {\n      parent.fieldArray = modified;\n      return true;\n    }\n    if (fieldArray.fieldGroup && this.replaceField(fieldArray.fieldGroup, original, modified)) {\n      return true;\n    }\n    return fieldArray.fieldArray && this.replaceFieldArray(fieldArray, original, modified);\n  }\n\n  private buildPath(key: string, path: string, arrayNext: boolean = false) {\n    return path ? key + (arrayNext ? path : '.' + path) : key;\n  }\n\n  private path(control: AbstractControl, includeSelf: boolean = true): string {\n    let path = '';\n    let arrayNext = false;\n\n    if (!includeSelf) {\n      control = (control || {} as AbstractControl).parent;\n    }\n    for (let child = control, parent = (control || {} as AbstractControl).parent; !!parent; child = parent, parent = parent.parent) {\n      if (parent instanceof FormGroup) {\n        for (const key in parent.controls) {\n          if (parent.controls[key] === child) {\n            path = this.buildPath(key, path, arrayNext);\n            arrayNext = false;\n            break;\n          }\n        }\n      } else if (parent instanceof FormArray) {\n        for (let i = 0; i < parent.length; i++) {\n          if (parent.at(i) === child) {\n            path = this.buildPath('[' + i + ']', path, arrayNext);\n            arrayNext = true;\n            break;\n          }\n        }\n      }\n    }\n    return path;\n  }\n\n  private unsetField(field: FormlyFieldConfig): void {\n    if (field) {\n      if (field.fieldArray) {\n        this.unsetField(field.fieldArray);\n      }\n      if (field.fieldGroup) {\n        field.fieldGroup.forEach(f => this.unsetField(f));\n      }\n      if (field.formControl) {\n        const path = this.path(field.formControl);\n        unset(this.model, path);\n      }\n    }\n  }\n\n  private removeControl(control: AbstractControl): void {\n    const parent = control ? control.parent : undefined;\n    if (parent instanceof FormGroup) {\n      for (const key in parent.controls) {\n        if (parent.controls[key] === control) {\n          parent.removeControl(key);\n          return;\n        }\n      }\n    } else if (parent instanceof FormArray) {\n      for (let i = 0; i < parent.length; i++) {\n        if (parent.at(i) === control) {\n          parent.removeAt(i);\n          return;\n        }\n      }\n    }\n  }\n}\n","import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, Component, ElementRef,\n    NgZone, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FieldWrapper } from '@ngx-formly/core';\nimport { FieldsService } from '../fields.service';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { FormlyDesignerService } from '../formly-designer.service';\nimport { cloneDeep } from '../util';\nimport { timer } from 'rxjs';\n\n@Component({\n    selector: 'formly-designer-field-wrapper',\n    template: `\n        <div *ngIf=\"!editing\" class=\"bg-info text-white control-panel\">\n            <span class=\"type\">{{ type }}</span>\n            <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn\" data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\" aria-expanded=\"false\" title=\"wrappers\">\n                    <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\n                </button>\n                <div class=\"dropdown-menu dropdown-menu-right\">\n                    <button class=\"dropdown-item\" type=\"button\" [disabled]=\"disabled\" title=\"add wrapper\"\n                        *ngFor=\"let wrapper of wrappers\" (click)=\"addWrapper(wrapper)\">\n                        {{ wrapper }}\n                    </button>\n                    <ng-container *ngIf=\"fieldWrappers.length\">\n                        <div *ngIf=\"wrappers.length\" class=\"dropdown-divider\"></div>\n                        <button class=\"dropdown-item\" type=\"button\" [disabled]=\"disabled\"\n                            *ngFor=\"let wrapper of fieldWrappers; let i=index\" (click)=\"removeWrapper(i)\">\n                            {{ wrapper }}&nbsp;&nbsp;<i class=\"fa fa-times\" aria-hidden=\"true\" title=\"remove wrapper\"></i>\n                        </button>\n                    </ng-container>\n                </div>\n            </div>\n            <button class=\"btn\" type=\"button\" [disabled]=\"disabled\" (click)=\"edit()\">\n                <i class=\"fa fa-pencil\" aria-hidden=\"true\" title=\"edit\"></i>\n            </button>\n            <button class=\"btn\" type=\"button\" [disabled]=\"disabled\" (click)=\"remove()\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" title=\"remove\"></i>\n            </button>\n        </div>\n        <div class=\"content\">\n            <div class=\"editor\" [hidden]=\"!editing\">\n                <formly-designer-field-editor #editor [hasContent]=\"true\" [showType]=\"true\" [showWrappers]=\"true\" [formControl]=\"fieldEdit\">\n                    <div class=\"footer\">\n                        <button (click)=\"cancel()\" class=\"btn btn-secondary mr-1\">Cancel</button>\n                        <button [disabled]=\"editor.invalid\" (click)=\"accept()\" class=\"btn btn-primary\">Apply</button>\n                    </div>\n                </formly-designer-field-editor>\n            </div>\n            <div [hidden]=\"editing\">\n                <ng-template #fieldComponent></ng-template>\n            </div>\n        </div>\n    `,\n    styles: [`\n        :host {\n            display: flex;\n            position: relative;\n            justify-content: flex-start;\n            align-content: flex-start;\n            align-items: flex-start;\n            margin: .25em;\n        }\n        :host.designerEmpty {\n            display:none;\n        }\n        .btn:not(:disabled), .dropdown-item:not(:disabled) {\n            cursor: pointer;\n        }\n        .control-panel {\n            font-size: .8em;\n            position: absolute;\n            padding: 0 0 0 .5em;\n            border-radius: 0 5px 0 0;\n            right: 0;\n            top: 0;\n        }\n        .control-panel > * {\n            padding-right: .5em;\n        }\n        .control-panel .btn {\n            font-size: unset;\n            background-color: unset;\n            padding: 0 .5em 0 0;\n            color: #fff;\n        }\n        .content {\n            border: 1px dashed #000;\n            border-radius: 5px;\n            min-height: 2em;\n            padding: 1.5em 1em 0 1em;\n            width: 100%;\n        }\n        .content:first-child {\n            padding-top: 0;\n        }\n        .editor {\n            margin: 1em 0;\n        }\n        .footer {\n            display: flex;\n            justify-content: flex-end;\n        }\n    `]\n})\nexport class FormlyDesignerFieldWrapperComponent extends FieldWrapper\n    implements AfterContentInit, AfterContentChecked, OnInit {\n    @ViewChild('fieldComponent', { read: ViewContainerRef }) fieldComponent: ViewContainerRef;\n\n    editing = false;\n    fieldEdit = new FormControl({});\n    fieldWrappers: string[] = [];\n    wrappers: string[] = [];\n    type: string;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private designerConfig: FormlyDesignerConfig,\n        private elementRef: ElementRef,\n        private fieldsService: FieldsService,\n        private formlyDesignerService: FormlyDesignerService,\n        private zone: NgZone\n    ) {\n        super();\n    }\n\n    ngOnInit(): void {\n        this.type = this.field.type;\n        this.wrappers = Object.getOwnPropertyNames(this.designerConfig.wrappers);\n        this.fieldWrappers = this.formlyDesignerService.getWrappers(this.formlyDesignerService.convertField(this.field)) || [];\n    }\n\n    ngAfterContentInit(): void {\n        this.zone.runOutsideAngular(() => setTimeout(() => this.checkDesigner()));\n    }\n\n    ngAfterContentChecked(): void {\n        this.zone.runOutsideAngular(() => setTimeout(() => this.checkDesigner()));\n    }\n\n    get disabled(): boolean {\n        return this.formlyDesignerService.disabled;\n    }\n\n    addWrapper(wrapper: string): void {\n        const field = cloneDeep(this.field);\n        if (field.wrappers) {\n            field.wrappers.push(wrapper);\n        } else {\n            field.wrappers = [wrapper];\n        }\n        this.formlyDesignerService.updateField(this.field, field);\n    }\n\n    removeWrapper(index: number): void {\n        const field = cloneDeep(this.field);\n        this.fieldWrappers.splice(index, 1);\n        field.wrappers = this.fieldWrappers;\n        this.formlyDesignerService.updateField(this.field, field);\n    }\n\n    edit(): void {\n        this.editing = true;\n        this.formlyDesignerService.disabled = true;\n        this.fieldEdit.setValue(this.formlyDesignerService.convertField(cloneDeep(this.field)));\n    }\n\n    remove(): void {\n        this.formlyDesignerService.removeField(this.field);\n    }\n\n    accept(): void {\n        if (!this.fieldsService.checkField(this.fieldEdit.value, this.formlyDesignerService.fields)) {\n            return;\n        }\n        timer().subscribe(() => {\n            this.formlyDesignerService.updateField(this.field, this.fieldEdit.value);\n            this.formlyDesignerService.disabled = false;\n            this.editing = false;\n        });\n    }\n\n    cancel(): void {\n        this.formlyDesignerService.disabled = false;\n        this.editing = false;\n    }\n\n    private checkDesigner(): void {\n        const element = this.elementRef.nativeElement as HTMLElement;\n        if (element.parentNode == null) {\n            return;\n        }\n\n        const designerEmpty = element.querySelector('formly-designer-wrapper') == null;\n        if (designerEmpty !== element.classList.contains('designerEmpty')) {\n            this.changeDetector.detectChanges();\n            if (designerEmpty) {\n                element.classList.add('designerEmpty');\n            } else {\n                element.classList.remove('designerEmpty');\n            }\n        }\n    }\n}\n","import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, Component, ElementRef,\n    NgZone, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FieldWrapper, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FieldsService } from '../fields.service';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { FormlyDesignerService } from '../formly-designer.service';\nimport { cloneDeep, isArray } from '../util';\nimport { NEVER, timer } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'formly-designer-field-group-wrapper',\n    template: `\n        <div *ngIf=\"!editing\" class=\"bg-info text-white control-panel\">\n            <span class=\"type\">{{ type }}</span>\n            <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn\" data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\" aria-expanded=\"false\" title=\"wrappers\">\n                    <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\n                </button>\n                <div class=\"dropdown-menu dropdown-menu-right\">\n                    <button class=\"dropdown-item\" type=\"button\" [disabled]=\"disabled\" title=\"add wrapper\"\n                        *ngFor=\"let wrapper of wrappers\" (click)=\"addWrapper(wrapper)\">\n                        {{ wrapper }}\n                    </button>\n                    <ng-container *ngIf=\"fieldWrappers.length\">\n                        <div *ngIf=\"wrappers.length\" class=\"dropdown-divider\"></div>\n                        <button class=\"dropdown-item\" type=\"button\" [disabled]=\"disabled\"\n                            *ngFor=\"let wrapper of fieldWrappers; let i=index\" (click)=\"removeWrapper(i)\">\n                            {{ wrapper }}&nbsp;&nbsp;<i class=\"fa fa-times\" aria-hidden=\"true\" title=\"remove wrapper\"></i>\n                        </button>\n                    </ng-container>\n                </div>\n            </div>\n            <button [disabled]=\"disabled\" type=\"button\" class=\"btn\" (click)=\"edit()\">\n                <i class=\"fa fa-pencil\" aria-hidden=\"true\" title=\"edit\"></i>\n            </button>\n            <button [disabled]=\"disabled\" type=\"button\" class=\"btn\" (click)=\"remove()\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" title=\"remove\"></i>\n            </button>\n        </div>\n        <div class=\"content\">\n            <div [hidden]=\"!editing\">\n                <formly-designer-field-editor #editor [fieldGroup]=\"true\" [hasContent]=\"true\" [showWrappers]=\"true\"\n                    [formControl]=\"fieldEdit\">\n                    <div class=\"footer\">\n                        <button (click)=\"cancel()\" class=\"btn btn-secondary mr-1\">Cancel</button>\n                        <button [disabled]=\"editor.invalid\" (click)=\"accept()\" class=\"btn btn-primary\">Apply</button>\n                    </div>\n                </formly-designer-field-editor>\n            </div>\n            <div [hidden]=\"editing\">\n                <div class=\"form-group\">\n                    <label>child</label>\n                    <formly-designer-field-picker (selected)=\"onFieldSelected($event)\"></formly-designer-field-picker>\n                </div>\n                <ng-template #fieldComponent></ng-template>\n            </div>\n        </div>\n    `,\n    styles: [`\n        :host {\n            display: flex;\n            position: relative;\n            justify-content: flex-start;\n            align-content: flex-start;\n            align-items: flex-start;\n            margin: .25em;\n        }\n        :host.designerEmpty {\n            display:none;\n        }\n        .btn:not(:disabled), .dropdown-item:not(:disabled) {\n            cursor: pointer;\n        }\n        .control-panel {\n            font-size: .8em;\n            position: absolute;\n            padding: 0 0 0 .5em;\n            border-radius: 0 5px 0 0;\n            right: 0;\n            top: 0;\n        }\n        .control-panel > * {\n            padding-right: .5em;\n        }\n        .control-panel .btn {\n            font-size: unset;\n            background-color: unset;\n            padding: 0 .5em 0 0;\n            color: #fff;\n        }\n        .content {\n            border: 1px dashed #000;\n            border-radius: 5px;\n            padding: 1em;\n            width: 100%;\n        }\n        .footer {\n            display: flex;\n            justify-content: flex-end;\n        }\n    `]\n})\nexport class FormlyDesignerFieldGroupWrapperComponent extends FieldWrapper\n    implements AfterContentInit, AfterContentChecked, OnInit {\n    @ViewChild('fieldComponent', { read: ViewContainerRef }) fieldComponent: ViewContainerRef;\n\n    type: string;\n    editing = false;\n    fieldEdit = new FormControl({});\n    fieldWrappers: string[] = [];\n    wrappers: string[] = [];\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private designerConfig: FormlyDesignerConfig,\n        private elementRef: ElementRef,\n        private fieldsService: FieldsService,\n        private formlyDesignerService: FormlyDesignerService,\n        private zone: NgZone\n    ) {\n        super();\n    }\n\n    ngOnInit(): void {\n        if (this.field.templateOptions.$fieldArray) {\n            this.type = this.field.templateOptions.$fieldArray.type || 'fieldArray';\n        } else if (this.field.type) {\n            this.type = this.field.type;\n        } else if (this.field.fieldGroup) {\n            this.type = 'fieldGroup';\n        }\n        this.wrappers = Object.getOwnPropertyNames(this.designerConfig.wrappers);\n        this.fieldWrappers = this.formlyDesignerService.convertField(this.field).wrappers || [];\n    }\n\n    ngAfterContentInit(): void {\n        this.zone.runOutsideAngular(() => setTimeout(() => this.checkDesigner()));\n    }\n\n    ngAfterContentChecked(): void {\n        this.zone.runOutsideAngular(() => setTimeout(() => this.checkDesigner()));\n    }\n\n    get disabled(): boolean {\n        return this.formlyDesignerService.disabled;\n    }\n\n    addWrapper(wrapper: string): void {\n        const field = cloneDeep(this.field);\n        if (field.wrappers) {\n            field.wrappers.push(wrapper);\n        } else {\n            field.wrappers = [wrapper];\n        }\n        this.formlyDesignerService.updateField(this.field, field);\n    }\n\n    removeWrapper(index: number): void {\n        const field = cloneDeep(this.field);\n        this.fieldWrappers.splice(index, 1);\n        field.wrappers = this.fieldWrappers;\n        this.formlyDesignerService.updateField(this.field, field);\n    }\n\n    edit(): void {\n        this.editing = true;\n        this.formlyDesignerService.disabled = true;\n        this.fieldEdit.setValue(this.formlyDesignerService.convertField(cloneDeep(this.field)));\n    }\n\n    remove(): void {\n        this.formlyDesignerService.removeField(this.field);\n    }\n\n    accept(): void {\n        if (!this.fieldsService.checkField(this.fieldEdit.value, this.formlyDesignerService.fields)) {\n            return;\n        }\n\n        timer().subscribe(() => {\n            this.formlyDesignerService.updateField(this.field, this.fieldEdit.value);\n            this.formlyDesignerService.disabled = false;\n            this.editing = false;\n        });\n    }\n\n    cancel(): void {\n        this.formlyDesignerService.disabled = false;\n        this.editing = false;\n    }\n\n    onFieldSelected(field: FormlyFieldConfig): void {\n        if (isArray(this.field.fieldGroup) &&\n            !this.fieldsService.checkField(field, this.formlyDesignerService.fields, this.field)) {\n            return;\n        }\n\n        const updatedField = cloneDeep(this.field);\n        updatedField.fieldGroup = isArray(updatedField.fieldGroup) ? updatedField.fieldGroup.slice() : [];\n        updatedField.fieldGroup.push(field);\n\n        timer()\n            .pipe(\n                tap(() => this.formlyDesignerService.updateField(this.field, updatedField)),\n                catchError(() => NEVER)\n            )\n            .subscribe();\n    }\n\n    private checkDesigner(): void {\n        const element = this.elementRef.nativeElement as HTMLElement;\n        if (element.parentNode == null) {\n            return;\n        }\n\n        const designerEmpty = element.querySelector('formly-designer-wrapper') == null;\n        if (designerEmpty !== element.classList.contains('designerEmpty')) {\n            this.changeDetector.detectChanges();\n            if (designerEmpty) {\n                element.classList.add('designerEmpty');\n            } else {\n                element.classList.remove('designerEmpty');\n            }\n        }\n    }\n}\n","import { FormlyFieldConfig, FormlyConfig } from '@ngx-formly/core';\n\nexport class TemplateDesigner {\n    private isNonDesignerField(field: FormlyFieldConfig): boolean {\n        return field && (!field.templateOptions || field.templateOptions['$designerField'] !== true);\n    }\n\n    run(fc: FormlyConfig) {\n        fc.templateManipulators.preWrapper.push((field: FormlyFieldConfig) => {\n            if (this.isNonDesignerField(field)) {\n                return field.fieldGroup ? 'fieldGroupDesigner' : 'fieldDesigner';\n            }\n        });\n        fc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\n            if (this.isNonDesignerField(field)) {\n                return 'designer';\n            }\n        });\n    }\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport { FormlyDesignerWrapperComponent } from './wrappers/designer';\nimport { FormlyDesignerFieldWrapperComponent } from './wrappers/field-designer';\nimport { FormlyDesignerFieldGroupWrapperComponent } from './wrappers/field-group-designer';\nimport { TemplateDesigner } from './run/designer';\n\nexport const fieldComponents = [];\n\nexport const wrapperComponents = [\n    FormlyDesignerWrapperComponent,\n    FormlyDesignerFieldWrapperComponent,\n    FormlyDesignerFieldGroupWrapperComponent\n];\n\nexport const config: ConfigOption = {\n    wrappers: [\n        { name: 'designer', component: FormlyDesignerWrapperComponent },\n        { name: 'fieldDesigner', component: FormlyDesignerFieldWrapperComponent },\n        { name: 'fieldGroupDesigner', component: FormlyDesignerFieldGroupWrapperComponent }\n    ],\n    manipulators: [\n        { class: TemplateDesigner, method: 'run' }\n    ]\n};\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FieldsService } from './fields.service';\nimport { FormlyDesignerService } from './formly-designer.service';\nimport { merge, NEVER, Subscription, timer } from 'rxjs';\nimport { catchError, debounceTime, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'formly-designer',\n    template: `\n        <formly-designer-field-picker (selected)=\"onFieldSelected($event)\">\n        </formly-designer-field-picker>\n        <form novalidate [formGroup]=\"form\">\n            <formly-form [options]=\"options\" [model]=\"formlyDesignerService.model\" [form]=\"form\" [fields]=\"formlyDesignerService.fields\">\n            </formly-form>\n        </form>\n        <!--<div>\n            Designer Fields Debug:\n            <pre>{{ fields | decycle | json }}</pre>\n        </div>-->\n    `,\n    styles: [`\n        formly-designer-field-picker .form-group > .input-group > formly-designer-type-select > select {\n            border-radius: .25rem 0 0 .25rem;\n            border-right: 0;\n        }\n        formly-designer-wrapper-editor .card > .card-body .form-control {\n            width: 100%;\n        }\n        formly-designer-wrapper-picker .form-group > .input-group > formly-designer-wrapper-select > select {\n            border-radius: .25rem 0 0 .25rem;\n            border-right: 0;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None,\n    providers: [FormlyDesignerService]\n})\nexport class FormlyDesignerComponent implements OnDestroy, OnInit {\n    @ViewChild('formlyFormContainer', { read: ViewContainerRef }) formlyFormContainer;\n    @Output() fieldsChange = new EventEmitter<FormlyFieldConfig[]>();\n    @Output() modelChange = new EventEmitter<any>();\n\n    types: string[] = [];\n    wrappers: string[] = [];\n    properties: string[] = [];\n    debugFields: FormlyFieldConfig[] = [];\n\n    form: FormGroup;\n    options: any = {};\n\n    private readonly subscriptions: Subscription[] = [];\n\n    constructor(\n        private fieldsService: FieldsService,\n        private formBuilder: FormBuilder,\n        public formlyDesignerService: FormlyDesignerService\n    ) { }\n\n    @Input()\n    get disabled(): boolean {\n        return this.formlyDesignerService.disabled;\n    }\n\n    set disabled(value: boolean) {\n        this.formlyDesignerService.disabled = value;\n    }\n\n    @Input()\n    get fields(): FormlyFieldConfig[] {\n        return this.formlyDesignerService.fields;\n    }\n\n    set fields(value: FormlyFieldConfig[]) {\n        const fields = this.formlyDesignerService.convertFields(value);\n        this.fieldsService.mutateFields(fields, false);\n        this.formlyDesignerService.fields = fields;\n    }\n\n    @Input()\n    get model(): any {\n        return this.formlyDesignerService.model;\n    }\n\n    set model(value: any) {\n        this.formlyDesignerService.model = value;\n    }\n\n    ngOnInit(): void {\n        // Designer forms will be restricted to a single field depth; all designer keys should be\n        // complex (e.g. \"templateOptions.some.property\")\n        this.form = this.formBuilder.group({});\n\n        this.subscriptions.push(this.formlyDesignerService.fields$\n            .subscribe(() => {\n                this.form = this.formBuilder.group({});\n                this.fieldsChange.emit(this.formlyDesignerService.createDesignerFields());\n            }));\n\n        this.subscriptions.push(merge(\n            this.formlyDesignerService.model$,\n            this.form.valueChanges\n        )\n            .pipe(debounceTime(50))\n            .subscribe(() => this.modelChange.emit(this.formlyDesignerService.model)));\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.splice(0).forEach(subscription => subscription.unsubscribe());\n    }\n\n    onFieldSelected(field: FormlyFieldConfig): void {\n        timer().pipe(\n            tap(() => {\n                if (this.fieldsService.checkField(field, this.formlyDesignerService.fields)) {\n                    this.formlyDesignerService.addField(field);\n                }\n            }),\n            catchError(() => NEVER)).subscribe();\n    }\n}\n","import { Component, ElementRef, forwardRef, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormControl, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FieldsService } from '../fields.service';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { merge, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { cloneDeep, isArray, isObject, isString } from '../util';\n\nconst FIELD_EDITOR_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FieldEditorComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'formly-designer-field-editor',\n    template: `\n        <form [formGroup]=\"form\" novalidate>\n            <div class=\"card\">\n                <div class=\"card-header\" [ngClass]=\"{solo: !hasContent && fields.length === 0}\">\n                    <div class=\"form-group\" [ngClass]=\"{'has-danger': form.hasError('key') && (key.dirty || key.touched)}\">\n                        <label class=\"form-control-label\">key</label>\n                        <input formControlName=\"key\" class=\"form-control\">\n                        <div *ngIf=\"form.hasError('key') && (key.dirty || key.touched)\" class=\"form-control-feedback\">\n                            key required.\n                        </div>\n                    </div>\n                    <div *ngIf=\"formlyDesignerConfig.settings.showClassName\" class=\"form-group\">\n                        <label class=\"form-control-label\">className</label>\n                        <input formControlName=\"className\" class=\"form-control\">\n                    </div>\n                    <div *ngIf=\"fieldGroup && formlyDesignerConfig.settings.showClassName\" class=\"form-group\">\n                        <label class=\"form-control-label\">fieldGroupClassName</label>\n                        <input formControlName=\"fieldGroupClassName\" class=\"form-control\">\n                    </div>\n                    <div *ngIf=\"showType\" class=\"form-group\"\n                        [ngClass]=\"{'has-danger': form.hasError('type') && (type.dirty || type.touched)}\">\n                        <label class=\"form-control-label\">type</label>\n                        <formly-designer-type-select formControlName=\"type\"></formly-designer-type-select>\n                        <div *ngIf=\"form.hasError('type') && (type.dirty || type.touched)\" class=\"form-control-feedback\">\n                            type required.\n                        </div>\n                    </div>\n                    <div *ngIf=\"showWrappers\" class=\"form-group\">\n                        <label class=\"form-control-label\">wrappers</label>\n                        <formly-designer-wrappers-picker [field]=\"field\"\n                            (selected)=\"onWrappersSelected($event)\">\n                        </formly-designer-wrappers-picker>\n                    </div>\n                </div>\n                <div #block class=\"card-body\">\n                    <formly-form *ngIf=\"fields.length > 0\" [form]=\"fieldForm\" [fields]=\"fields\" [model]=\"field\">\n                    </formly-form>\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </form>\n    `,\n    styles: [`\n        .card-header.solo {\n            border-bottom: 0;\n        }\n        .card-header.solo + .card-body {\n            display: none;\n        }\n    `],\n    providers: [\n        FIELD_EDITOR_CONTROL_VALUE_ACCESSOR\n    ]\n})\nexport class FieldEditorComponent implements ControlValueAccessor, OnDestroy, OnInit {\n    @Input() fieldGroup: boolean;\n    @Input() showType: boolean;\n    @Input() showWrappers: boolean;\n    @Input() hasContent: boolean;\n    @ViewChild('block') blockElRef: ElementRef;\n\n    private readonly subscriptions: Subscription[] = [];\n    private valueChangesSubscription: Subscription;\n\n    constructor(\n        private fieldsService: FieldsService,\n        private fb: FormBuilder,\n        public formlyDesignerConfig: FormlyDesignerConfig\n    ) {\n        this.form = fb.group({\n            key: this.key = fb.control(''),\n            className: this.className = fb.control(''),\n            fieldGroupClassName: this.fieldGroupClassName = fb.control(''),\n            type: this.type = fb.control('')\n        }, { validator: (control) => this.validator(control) });\n        this.fieldForm = fb.group({});\n    }\n\n    readonly form: FormGroup;\n    readonly key: FormControl;\n    readonly className: FormControl;\n    readonly fieldGroupClassName: FormControl;\n    readonly type: FormControl;\n\n    fieldForm: FormGroup;\n    field: FormlyFieldConfig = {};\n    fields: FormlyFieldConfig[] = [];\n    fieldArray: boolean;\n    invalid: boolean;\n\n    protected onChange = (_: any) => { };\n    protected onTouched = () => { };\n\n    ngOnInit(): void {\n        this.subscriptions.push(this.type.valueChanges\n            .subscribe(() => this.onTypeChange()));\n\n        this.subscriptions.push(this.form.statusChanges\n            .pipe(debounceTime(0))\n            .subscribe(() => this.invalid = this.form.invalid));\n\n        this.subscribeValueChanges();\n    }\n\n    ngOnDestroy(): void {\n        this.valueChangesSubscription.unsubscribe();\n        this.subscriptions.splice(0).forEach(subscription => subscription.unsubscribe());\n    }\n\n    writeValue(obj: any) {\n        this.valueChangesSubscription.unsubscribe();\n        this.updateField(obj);\n        this.form.markAsPristine();\n        this.form.markAsUntouched();\n        this.subscribeValueChanges();\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.form.disable();\n        } else {\n            this.form.enable();\n        }\n    }\n\n    private subscribeValueChanges(): void {\n        this.valueChangesSubscription = merge(this.fieldForm.valueChanges, this.form.valueChanges)\n            .pipe(debounceTime(0))\n            .subscribe(() => this.updateValue());\n    }\n\n    private updateField(field: FormlyFieldConfig): void {\n        if (!isObject(field)) {\n            field = {};\n        }\n        this.key.setValue(isString(field.key) ? field.key : '');\n        this.className.setValue(isString(field.className) ? field.className : '');\n        this.fieldGroupClassName.setValue(isString(field.fieldGroupClassName) ? field.fieldGroupClassName : '');\n        this.type.setValue(isString(field.type) ? field.type : '');\n        this.fields = this.fieldsService.getTypeFields(this.type.value);\n        this.fieldForm = this.fb.group({});\n        this.field = cloneDeep(field);\n    }\n\n    private updateValue(): void {\n        if (!this.onChange) {\n            return;\n        }\n\n        const field = this.field;\n        field.key = this.key.value;\n        field.className = this.className.value;\n        field.fieldGroupClassName = this.fieldGroupClassName.value;\n        field.type = this.type.value;\n        this.onChange(field);\n    }\n\n    private onTypeChange(): void {\n        this.valueChangesSubscription.unsubscribe();\n        const type = this.type.value;\n        this.fields = this.fieldsService.getTypeFields(type);\n        const designerType = this.formlyDesignerConfig.types[type];\n        this.fieldArray = designerType && designerType.fieldArray;\n        this.fieldForm = this.fb.group({});\n        this.field = Object.assign({}, this.field);\n        this.subscribeValueChanges();\n    }\n\n    onWrappersSelected(field: FormlyFieldConfig): void {\n        this.updateField(field);\n    }\n\n    private validator(control: FormGroup): { [key: string]: boolean } {\n        const type = control.get('type') as FormControl;\n        const hasType = isString(type.value) && type.value.trim().length > 0;\n\n        const key = control.get('key') as FormControl;\n        const result = { key: false, type: this.showType && !hasType, conflict: false };\n        if (hasType && (!isString(key.value) || key.value.trim().length === 0)) {\n            result.key = true;\n        }\n\n        return result.key || result.type ? result : null;\n    }\n}\n","import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { DesignerTypeOption, FormlyDesignerConfig } from '../formly-designer-config';\n\n@Component({\n    selector: 'formly-designer-field-picker',\n    template: `\n        <form novalidate [formGroup]=\"form\">\n            <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <formly-designer-type-select formControlName=\"type\">\n                    </formly-designer-type-select>\n                    <button type=\"button\" class=\"btn btn-secondary\" [disabled]=\"form.invalid\" (click)=\"add()\">\n                        Add\n                    </button>\n                </div>\n            </div>\n            <div #modal class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog modal-lg\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Add {{ type.value }}</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Cancel\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <formly-designer-field-editor #editor [fieldGroup]=\"fieldEdit.value.fieldGroup\" [formControl]=\"fieldEdit\">\n                            </formly-designer-field-editor>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"onApply()\"\n                                [disabled]=\"editor.invalid\">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    `,\n    styles: [`\n        .btn:not(:disabled) {\n            cursor: pointer;\n        }\n        .input-group > .btn {\n            border-radius: 0 .25rem .25rem 0;\n        }\n        .input-group, .modal-header {\n            display: flex;\n        }\n        .modal-header {\n            justify-content: space-between;\n        }\n        formly-designer-type-select {\n            flex-grow: 2;\n        }\n    `]\n})\nexport class FieldPickerComponent {\n    @ViewChild('modal') modalRef: ElementRef;\n    @Output() selected = new EventEmitter<FormlyFieldConfig>();\n\n    constructor(\n        fb: FormBuilder,\n        private formlyDesignerConfig: FormlyDesignerConfig\n    ) {\n      this.form = fb.group({\n          type: this.type = fb.control('', Validators.compose([Validators.required, Validators.pattern(/^\\s*\\S.*$/)]))\n      });\n    }\n\n    form: FormGroup;\n    readonly fieldEdit = new FormControl({});\n    readonly type: FormControl;\n    fieldGroup: boolean;\n\n    private get $modal(): JQuery & { modal: (command: string) => void } {\n        return $(this.modalRef.nativeElement) as any;\n    }\n\n    add(): void {\n        const type = this.type.value;\n        const field = {} as FormlyFieldConfig;\n        if (type !== 'fieldGroup') {\n          field.type = type;\n        }\n        const designerType = this.formlyDesignerConfig.types[type] || {} as DesignerTypeOption;\n        if (designerType.fieldArray) {\n            field.fieldArray = { fieldGroup: [] };\n        }\n        if (this.fieldGroup = (type === 'fieldGroup' || designerType.fieldGroup)) {\n            field.fieldGroup = [];\n        }\n        this.fieldEdit.setValue(field);\n        this.$modal.modal('show');\n    }\n\n    onApply(): void {\n        this.selected.emit(this.fieldEdit.value);\n        this.$modal.modal('hide');\n    }\n}\n","import { AfterViewInit, Component, forwardRef, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { Subscription, timer } from 'rxjs';\n\nconst TYPE_SELECT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TypeSelectComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'formly-designer-type-select',\n    template: `\n        <select [formControl]=\"formControl\" class=\"custom-select\">\n            <option *ngFor=\"let type of types\" [ngValue]=\"type\">{{ type }}</option>\n        </select>\n    `,\n    styles: [`\n        select {\n            width: 100%;\n        }\n    `],\n    providers: [TYPE_SELECT_CONTROL_VALUE_ACCESSOR]\n})\nexport class TypeSelectComponent implements AfterViewInit, ControlValueAccessor, OnDestroy, OnInit {\n    private valueChangesSubscription: Subscription;\n\n    formControl = new FormControl();\n    types: string[];\n\n    constructor(\n        private formlyDesignerConfig: FormlyDesignerConfig\n    ) { }\n\n    protected onChange = (value: any) => { };\n    protected onTouched = () => { };\n\n    ngAfterViewInit(): void {\n        timer().subscribe(() => {\n            this.types = Object.keys(this.formlyDesignerConfig.types);\n            if (this.types.length > 0) {\n                this.formControl.setValue(this.types[0]);\n            }\n            this.types.push('fieldGroup');\n        });\n    }\n\n    ngOnInit(): void {\n        this.valueChangesSubscription = this.formControl.valueChanges.subscribe(value => {\n            if (this.onChange) {\n                this.onChange(value);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.valueChangesSubscription.unsubscribe();\n    }\n\n    writeValue(obj: any) {\n        this.formControl.setValue(obj);\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.formControl.disable();\n        } else {\n            this.formControl.enable();\n        }\n    }\n}\n","import { Component, forwardRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FieldsService } from '../fields.service';\nimport { Subscription, timer } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { cloneDeep, isObject } from '../util';\n\nconst WRAPPER_EDITOR_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WrapperEditorComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'formly-designer-wrapper-editor',\n    template: `\n        <form [formGroup]=\"fieldForm\" novalidate>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <formly-form [form]=\"fieldForm\" [fields]=\"fields\" [model]=\"field\">\n                    </formly-form>\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </form>\n    `,\n    providers: [\n        WRAPPER_EDITOR_CONTROL_VALUE_ACCESSOR\n    ]\n})\nexport class WrapperEditorComponent implements ControlValueAccessor, OnChanges, OnDestroy, OnInit {\n    @Input() wrapper: string;\n\n    private readonly subscriptions: Subscription[] = [];\n    private valueChangesSubscription: Subscription;\n\n    constructor(\n        private fieldsService: FieldsService,\n        private formBuilder: FormBuilder\n    ) {\n        this.fieldForm = formBuilder.group({});\n    }\n\n    invalid: boolean;\n    fieldForm: FormGroup;\n    field: FormlyFieldConfig;\n    fields: FormlyFieldConfig[] = [];\n\n    protected onChange = (value: any) => { };\n    protected onTouched = () => { };\n\n    ngOnInit(): void {\n        this.subscriptions.push(this.fieldForm.statusChanges\n            .pipe(switchMap(() => timer()))\n            .subscribe(() => this.invalid = this.fieldForm.invalid));\n\n        this.subscribeValueChanges();\n    }\n\n    ngOnDestroy(): void {\n        this.valueChangesSubscription.unsubscribe();\n        this.subscriptions.splice(0).forEach(subscription => subscription.unsubscribe());\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.wrapper) {\n            if (this.valueChangesSubscription) {\n                this.valueChangesSubscription.unsubscribe();\n            }\n            this.fields = this.fieldsService.getWrapperFields(this.wrapper);\n            this.fieldForm = this.formBuilder.group({});\n            this.field = Object.assign({}, this.field);\n            if (this.valueChangesSubscription) {\n                this.subscribeValueChanges();\n            }\n        }\n    }\n\n    writeValue(obj: any) {\n        this.valueChangesSubscription.unsubscribe();\n        if (!isObject(obj)) {\n            obj = {};\n        }\n        this.fields = this.fieldsService.getWrapperFields(this.wrapper);\n        this.fieldForm = this.formBuilder.group({});\n        this.field = cloneDeep(obj);\n        this.subscribeValueChanges();\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.fieldForm.disable();\n        } else {\n            this.fieldForm.enable();\n        }\n    }\n\n    private subscribeValueChanges(): void {\n        this.valueChangesSubscription = this.fieldForm.valueChanges\n            .pipe(debounceTime(0))\n            .subscribe(() => this.updateValue());\n    }\n\n    private updateValue(): void {\n        if (!this.onChange) {\n            return;\n        }\n\n        this.onChange(this.field);\n    }\n}\n","import { AfterViewInit, Component, forwardRef, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { Subscription, timer } from 'rxjs';\n\nconst WRAPPER_SELECT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WrapperSelectComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'formly-designer-wrapper-select',\n    template: `\n        <select [formControl]=\"formControl\" class=\"custom-select\">\n            <option *ngFor=\"let wrapper of wrappers\" [ngValue]=\"wrapper\">{{ wrapper }}</option>\n        </select>\n    `,\n    styles: [`\n        select {\n            width: 100%;\n        }\n    `],\n    providers: [WRAPPER_SELECT_CONTROL_VALUE_ACCESSOR]\n})\nexport class WrapperSelectComponent implements AfterViewInit, ControlValueAccessor, OnDestroy, OnInit {\n    private valueChangesSubscription: Subscription;\n\n    constructor(\n        private formlyDesignerConfig: FormlyDesignerConfig\n    ) { }\n\n    formControl = new FormControl();\n    wrappers: string[];\n\n    protected onChange = (value: any) => { };\n    protected onTouched = () => { };\n\n    ngAfterViewInit(): void {\n        timer().subscribe(() => {\n            this.wrappers = Object.keys(this.formlyDesignerConfig.wrappers);\n            if (this.wrappers.length > 0) {\n                this.formControl.setValue(this.wrappers[0]);\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.valueChangesSubscription = this.formControl.valueChanges.subscribe(value => {\n            if (this.onChange) {\n                this.onChange(value);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.valueChangesSubscription.unsubscribe();\n    }\n\n    writeValue(obj: any) {\n        this.formControl.setValue(obj);\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.formControl.disable();\n        } else {\n            this.formControl.enable();\n        }\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { FormlyDesignerService } from '../formly-designer.service';\nimport { cloneDeep, isArray, isObject } from '../util';\n\ndeclare var $;\n\n@Component({\n    selector: 'formly-designer-wrapper-picker',\n    template: `\n        <form novalidate [formGroup]=\"form\">\n            <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <formly-designer-wrapper-select formControlName=\"wrapper\">\n                    </formly-designer-wrapper-select>\n                    <button type=\"button\" class=\"btn btn-secondary\" [disabled]=\"form.invalid\" (click)=\"add()\">\n                        Add\n                    </button>\n                </div>\n            </div>\n            <div #modal class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog modal-lg\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Add {{ wrapper }}</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Cancel\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <formly-designer-wrapper-editor #editor [formControl]=\"fieldEdit\" [wrapper]=\"wrapper\">\n                            </formly-designer-wrapper-editor>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"onApply()\"\n                                [disabled]=\"editor.invalid\">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    `,\n    styles: [`\n        :host {\n            width: inherit;\n        }\n        .btn:not(:disabled) {\n            cursor: pointer;\n        }\n        .input-group > .btn {\n            border-radius: 0 .25rem .25rem 0;\n        }\n        .input-group, .modal-header {\n            display: flex;\n        }\n        .modal-header {\n            justify-content: space-between;\n        }\n        formly-designer-wrapper-select {\n            flex-grow: 2;\n        }\n    `]\n})\nexport class WrapperPickerComponent implements OnInit {\n    @ViewChild('modal') modalRef: ElementRef;\n    @Input() field: FormlyFieldConfig;\n    @Output() selected = new EventEmitter<FormlyFieldConfig>();\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private formlyDesignerConfig: FormlyDesignerConfig,\n        private formlyDesignerService: FormlyDesignerService\n    ) { }\n\n    form: FormGroup;\n    fieldEdit = new FormControl({});\n\n    get wrapper(): string {\n        return this.form.get('wrapper').value;\n    }\n\n    private get $modal(): JQuery & { modal: (command: string) => void } {\n        return $(this.modalRef.nativeElement);\n    }\n\n    ngOnInit(): void {\n        this.form = this.formBuilder.group({\n            wrapper: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*\\S.*$/)])]\n        });\n    }\n\n    add(): void {\n        if (isObject(this.field)) {\n            const field = cloneDeep(this.field);\n            if (isArray(field.wrappers) && field.wrappers.length > 0) {\n                field.wrappers.splice(field.wrappers.length - 1, 0, this.wrapper);\n            } else {\n                field.wrappers = [this.wrapper];\n            }\n            this.fieldEdit.setValue(field);\n\n            const fields = this.formlyDesignerConfig.wrappers[this.wrapper].fields;\n            if (isArray(fields) && fields.length > 0) {\n                this.$modal.modal('show');\n            } else {\n                this.onApply();\n            }\n        }\n    }\n\n    onApply(): void {\n        this.field = this.formlyDesignerService.convertField(this.fieldEdit.value);\n        this.selected.emit(this.fieldEdit.value);\n        this.$modal.modal('hide');\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyDesignerConfig } from '../formly-designer-config';\nimport { FormlyDesignerService } from '../formly-designer.service';\nimport { cloneDeep, isArray, isObject } from '../util';\n\n@Component({\n    selector: 'formly-designer-wrappers-picker',\n    template: `\n        <div class=\"form-group\">\n            <div class=\"input-group\">\n                <formly-designer-wrapper-picker [field]=\"field\" (selected)=\"onWrapperSelected($event)\">\n                </formly-designer-wrapper-picker>\n            </div>\n            <div *ngFor=\"let wrapper of wrappers; let i = index\" class=\"badge badge-default noselect\" (click)=\"edit(i)\">\n                {{ wrapper }}&nbsp;&nbsp;<i class=\"fa fa-times\" aria-hidden=\"true\" (click)=\"remove(i)\"></i>\n            </div>\n        </div>\n        <div #modal class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n            <div class=\"modal-dialog modal-lg\" role=\"document\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">Edit {{ wrapper }}</h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Cancel\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <formly-designer-wrapper-editor #editor [formControl]=\"fieldEdit\" [wrapper]=\"wrapper\">\n                        </formly-designer-wrapper-editor>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"onApply()\"\n                            [disabled]=\"editor.invalid\">Apply</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .badge {\n            margin-right: .25em;\n        }\n        .badge {\n            cursor: pointer;\n        }\n        .noselect {\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n    `]\n})\nexport class WrappersPickerComponent implements OnChanges {\n    @ViewChild('modal') modalRef: ElementRef;\n    @Input() field: FormlyFieldConfig;\n    @Output() selected = new EventEmitter<FormlyFieldConfig>();\n\n    wrapper: string;\n    fieldEdit = new FormControl({});\n\n    wrappers: string[] = [];\n\n    constructor(\n        private formlyDesignerConfig: FormlyDesignerConfig,\n        private formlyDesignerService: FormlyDesignerService\n    ) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.field) {\n            this.wrappers = this.formlyDesignerService.getWrappers(changes.field.currentValue);\n        }\n    }\n\n    private get $modal(): JQuery & { modal: (command: string) => void } {\n        return $(this.modalRef.nativeElement) as any;\n    }\n\n    onWrapperSelected(field: FormlyFieldConfig): void {\n        this.selected.emit(field);\n    }\n\n    edit(index: number): void {\n        this.wrapper = this.wrappers[index];\n        if (isObject(this.field)) {\n            const field = cloneDeep(this.field);\n            if (isArray(field.wrappers)) {\n                this.fieldEdit.setValue(field);\n\n                const fields = this.formlyDesignerConfig.wrappers[this.wrapper].fields;\n                if (isArray(fields) && fields.length > 0) {\n                    this.$modal.modal('show');\n                } else {\n                    this.onApply();\n                }\n            }\n        }\n    }\n\n    remove(index: number): void {\n        const fieldWrappersIndex = this.field.wrappers.indexOf(this.wrappers[index]);\n        if (fieldWrappersIndex < 0) {\n            return;\n        }\n\n        const field = cloneDeep(this.field);\n        field.wrappers.splice(fieldWrappersIndex, 1);\n        this.field = this.formlyDesignerService.convertField(field);\n        this.selected.emit(this.field);\n    }\n\n    onApply(): void {\n        this.field = this.formlyDesignerService.convertField(this.fieldEdit.value);\n        this.selected.emit(this.field);\n        this.$modal.modal('hide');\n    }\n}\n","import { cloneDeep, isArray, isObject } from './util';\n\nexport function decycle<T>(value: T): T {\n    if (value == null) {\n        return value;\n    }\n\n    let nextId = 1;\n    const objects = new Map<any, number>();\n    return traverse(cloneDeep(value), (key, v) => {\n        if (isObject(v)) {\n            if (objects.has(v)) {\n                let id = objects.get(v);\n                if (!id) {\n                    v.$id = id = nextId++;\n                    objects.set(v, id);\n                }\n                return { $ref: id };\n            } else {\n                objects.set(v, 0);\n            }\n        }\n    });\n}\n\nfunction traverse<T>(obj: T, replace: (key, value) => any): T {\n    if (isArray(obj)) {\n        for (let i = 0; i < (obj as any).length; i++) {\n            traverseValue.bind(obj, i, obj[i], replace)();\n        }\n    } else if (isObject(obj)) {\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                traverseValue.bind(obj, key, obj[key], replace)();\n            }\n        }\n    }\n    return obj;\n}\n\nfunction traverseValue(key: any, value: any, replace: (key, value) => any): void {\n    const replacement = replace(key, value);\n    if (replacement === undefined) {\n        traverse(value, replace);\n    } else {\n        this[key] = replacement;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { decycle } from '../json-helper';\n\n@Pipe({ name: 'decycle' })\nexport class DecyclePipe implements PipeTransform {\n    transform(value: any): any {\n        return decycle(value);\n    }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FieldEditorComponent } from './components/field-editor';\nimport { FieldPickerComponent } from './components/field-picker';\nimport { FieldsService } from './fields.service';\nimport { FormlyConfig, FormlyForm, FormlyModule } from '@ngx-formly/core';\nimport { FormlyDesignerComponent } from './formly-designer.component';\nimport { DesignerConfigOption, FormlyDesignerConfig, FORMLY_DESIGNER_CONFIG_TOKEN } from './formly-designer-config';\nimport { config, fieldComponents, wrapperComponents } from './config';\nimport { TypeSelectComponent } from './components/type-select';\nimport { WrapperEditorComponent } from './components/wrapper-editor';\nimport { WrapperSelectComponent } from './components/wrapper-select';\nimport { WrapperPickerComponent } from './components/wrapper-picker';\nimport { WrappersPickerComponent } from './components/wrappers-picker';\nimport { DecyclePipe } from './pipes/decycle';\nimport 'jquery';\n\n@NgModule({\n    declarations: [\n        FieldEditorComponent,\n        FieldPickerComponent,\n        FormlyDesignerComponent,\n        TypeSelectComponent,\n        WrapperEditorComponent,\n        WrapperSelectComponent,\n        WrapperPickerComponent,\n        WrappersPickerComponent,\n\n        DecyclePipe,\n\n        fieldComponents,\n        wrapperComponents\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        FormlyModule.forChild()\n    ],\n    exports: [\n        FormlyDesignerComponent\n    ],\n    providers: [\n        FormlyDesignerConfig,\n        FieldsService\n    ],\n    entryComponents: [FormlyForm]\n})\nexport class FormlyDesignerModule {\n    constructor(\n        formlyConfig: FormlyConfig\n    ) {\n        formlyConfig.addConfig(config);\n    }\n\n    static forRoot(designerConfig: DesignerConfigOption = {}): ModuleWithProviders {\n        return {\n            ngModule: FormlyDesignerModule,\n            providers: [\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: [fieldComponents, wrapperComponents], multi: true },\n                { provide: FORMLY_DESIGNER_CONFIG_TOKEN, useValue: designerConfig, multi: true }\n            ]\n        };\n    }\n}\n"]}