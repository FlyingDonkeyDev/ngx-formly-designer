!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("lodash-es"),require("@angular/common"),require("@ngx-formly/core"),require("rxjs/operators"),require("rxjs"),require("@angular/forms"),require("@angular/core"),require("jquery")):"function"==typeof define&&define.amd?define("ngx-formly-designer",["exports","lodash-es","@angular/common","@ngx-formly/core","rxjs/operators","rxjs","@angular/forms","@angular/core","jquery"],t):t(e["ngx-formly-designer"]={},e.lodashEs,e.ng.common,e.core,e.rxjs.operators,e.rxjs,e.ng.forms,e.ng.core)}(this,function(e,p,r,n,i,o,a,s){"use strict";var l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function d(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function f(e){var t="function"==typeof Symbol&&e[Symbol.iterator],r=0;return t?t.call(e):{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.decorators=[{type:s.Component,args:[{selector:"formly-designer-wrapper",template:"\n        <ng-template #fieldComponent></ng-template>\n    "}]}],t.propDecorators={fieldComponent:[{type:s.ViewChild,args:["fieldComponent",{read:s.ViewContainerRef}]}]},t}(n.FieldWrapper),c=new s.InjectionToken("FORMLY_DESIGNER_CONFIG_TOKEN"),u=function(){function e(e,t){void 0===e&&(e=[]);var r=this;this.formlyConfig=t,this.types={},this.wrappers={},this.settings={showClassName:!0},e.forEach(function(e){return r.addConfig(e)})}return e.prototype.addConfig=function(e){e.settings&&this.setSettings(e.settings),e.types&&this.setType(e.types),e.wrappers&&this.setWrapper(e.wrappers)},e.prototype.setSettings=function(e){e.showClassName!==undefined&&(this.settings.showClassName=!!e.showClassName)},e.prototype.setType=function(e){var t=this;if(Array.isArray(e))e.forEach(function(e){t.setType(e)});else{this.formlyConfig.getType(e.name),this.types[e.name]||(this.types[e.name]={});var r=this.types[e.name];r.name=e.name,r.fieldArray=!!e.fieldArray,r.fieldGroup=!!e.fieldGroup,r.fields=e.fields}},e.prototype.setWrapper=function(e){var t=this;if(Array.isArray(e))e.forEach(function(e){t.setWrapper(e)});else{this.formlyConfig.getWrapper(e.name),this.wrappers[e.name]||(this.wrappers[e.name]={});var r=this.wrappers[e.name];r.name=e.name,r.fields=e.fields}},e.decorators=[{type:s.Injectable}],e.ctorParameters=function(){return[{type:Array,decorators:[{type:s.Inject,args:[c]}]},{type:n.FormlyConfig}]},e}(),h="_formlyDesignerKeyPath";function m(e){var t,r;if(!e[h]||e[h].key!==e.key){var n=[];if(e.key){var i="string"==typeof e.key?e.key.split("."):e.key;try{for(var o=f(i),s=o.next();!s.done;s=o.next()){"string"==typeof(a=s.value)?(a=a.replace(/\[(\w+)\]/g,".$1"),n=n.concat(a.split("."))):n.push(a)}}catch(p){t={error:p}}finally{try{s&&!s.done&&(r=o["return"])&&r.call(o)}finally{if(t)throw t.error}}for(var l=0;l<n.length;l++){var a;"string"==typeof(a=n[l])&&/^\d+$/.test(a)&&(n[l]=parseInt(a,10))}}e[h]={key:e.key,path:n}}return e[h].path.slice()}function y(e,t,r,n){var i,o;r=r||[];try{for(var s=f(e),l=s.next();!l.done;l=s.next()){var a=l.value;if(t(a,r,n))return!0;if(a.fieldArray){if(y([a.fieldArray],t,r.concat(m(a)),a))return!0}else if(a.fieldGroup&&y(a.fieldGroup,t,r.concat(m(a)),a))return!0}}catch(p){i={error:p}}finally{try{l&&!l.done&&(o=s["return"])&&o.call(s)}finally{if(i)throw i.error}}}var g=Array.isArray,v=function(e){return"object"==typeof e&&null!=e},b=function(e){return"string"==typeof e||e instanceof String},C=function(){function e(e){this.formlyDesignerConfig=e}return e.prototype.getFullKeyPath=function(e,t){var r=[];if(e&&e.key){var n=new Map;y(t,function(e,t,r){n.set(e,r)}),r=m(e);for(var i=n.get(e);i;)r=m(i).concat(r),i=n.get(i)}return r},e.prototype.getTypeFields=function(e){return this.getFields(e,"type")},e.prototype.getWrapperFields=function(e){return this.getFields(e,"wrapper")},e.prototype.checkField=function(o,e,t){var s=new Map,l=this.getFullKeyPath(t||{},e).concat(m(o)),a=l.length;return!y(e,function(e,t){var r=s.get(e)||s.set(e,(t||[]).concat(m(e))).get(e);if(r.length===a){for(var n=0;n<a;n++)if(r[n]!==l[n])return;return!function i(e,t){return!e.fieldArray==!t.fieldArray&&!e.fieldGroup==!t.fieldGroup}(o,e)}})},e.prototype.mutateField=function(e,t){return v(e.templateOptions)?e.templateOptions.$designerField=t:e.templateOptions={$designerField:t},e.fieldGroup?this.mutateFields(e.fieldGroup,t):e.fieldArray&&e.fieldArray.fieldGroup&&(t?this.mutateField(e.fieldArray,t):(e.templateOptions.$fieldArray={type:e.type},e.fieldGroup=e.fieldArray.fieldGroup,delete e.fieldArray,delete e.type,this.mutateFields(e.fieldGroup,t))),e},e.prototype.mutateFields=function(e,t){var r=this;e.forEach(function(e){return r.mutateField(e,t)})},e.prototype.getFields=function(e,t){var r=e&&this.getDesignerOptions(t)[e]||{},n=p.cloneDeep(r.fields||[]);return this.mutateFields(n,!0),n},e.prototype.getDesignerOptions=function(e){return"type"===e?this.formlyDesignerConfig.types:"wrapper"===e?this.formlyDesignerConfig.wrappers:{}},e.decorators=[{type:s.Injectable}],e.ctorParameters=function(){return[{type:u}]},e}(),w=function(){function e(e,t,r){this.designerConfig=e,this.fieldsService=t,this.formlyConfig=r,this._disabled=new o.BehaviorSubject(!1),this._fields=new o.BehaviorSubject([]),this._model=new o.BehaviorSubject({})}return Object.defineProperty(e.prototype,"disabled",{get:function(){return this._disabled.value},set:function(e){this._disabled.next(!!e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disabled$",{get:function(){return this._disabled.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields",{get:function(){return this._fields.value},set:function(e){var t=this.createPrunedFields(g(e)?e:[]);this._fields.next(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields$",{get:function(){return this._fields.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"model",{get:function(){return this._model.value},set:function(e){this._model.next(null==e?{}:e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"model$",{get:function(){return this._model.asObservable()},enumerable:!0,configurable:!0}),e.prototype.addField=function(e){this.fieldsService.mutateField(e,!1);var t=p.cloneDeep(this.fields);t.push(e),this.fields=t,this.model=p.cloneDeep(this.model)},e.prototype.removeField=function(e){this.unsetField(e),this.replaceField(this.fields,e,undefined)&&this.removeControl(e.formControl),this.fields=p.cloneDeep(this.fields),this.model=p.cloneDeep(this.model)},e.prototype.updateField=function(e,t){var r=this.fieldsService.mutateField(this.createPrunedField(t),!1);this.replaceField(this.fields,e,r)&&(e.formControl!==r.formControl&&(this.unsetField(e),this.removeControl(e.formControl)),this.fields=p.cloneDeep(this.fields),this.model=p.cloneDeep(this.model))},e.prototype.convertField=function(e){return this.createPrunedField(e)},e.prototype.convertFields=function(e){return this.createPrunedFields(e)},e.prototype.createDesignerFields=function(){return this.createPrunedFields(this.fields)},e.prototype.createPrunedFields=function(e){var r=this,n=[];return g(e)&&e.forEach(function(e){var t=r.createPrunedField(e);e.fieldArray?t.fieldArray=r.createPrunedField(e.fieldArray):e.fieldGroup&&!t.fieldArray&&(t.fieldGroup=r.createPrunedFields(e.fieldGroup)),0<Object.keys(t).length&&n.push(t)}),n},e.prototype.getWrappers=function(e){var t=this;if(!e||!g(e.wrappers))return[];var r=p.cloneDeep(e),n=r.wrappers=r.wrappers||[];"function"==typeof this.designerConfig.settings.filterWrapper&&(n=n.filter(function(e){return t.designerConfig.settings.filterWrapper(e,r)}));var i=(e.type&&this.formlyConfig.getType(e.type).wrappers||[]).concat(this.formlyConfig.templateManipulators.preWrapper.map(function(e){return e(r)})).concat(this.formlyConfig.templateManipulators.postWrapper.map(function(e){return e(r)})).filter(function(e){return e});if(0<i.length)for(var o=n.length-1;0<=o;o--)for(var s=i.length-1;0<=s;s--)if(n[o]===i[s]){i.splice(s,1),n.splice(o,1);break}return n},e.prototype.createPrunedField=function(e){var t,r=this,n=p.get(e,"templateOptions.$fieldArray.type",e.type),i=this.designerConfig.types[n],o=function(e){if(e===undefined)return!0;if("function"==typeof e||"number"==typeof e||"boolean"==typeof e||"[object Date]"===Object.prototype.toString.call(e))return!1;if(null==e||0===e.length)return!0;if("object"!=typeof e)return!1;var t=void 0;for(var r in e)t=!1;return t}(e.key)?{}:{key:e.key};if(i&&(o.type=n,this.applyProperties(e,o,i.fields),i.fieldArray&&(o.fieldArray={fieldGroup:this.createPrunedFields(e.fieldGroup)})),g(e.fieldGroup)&&!g(o.fieldArray)){o.fieldGroup=this.createPrunedFields(e.fieldGroup);var s=void 0;b(e.fieldGroupClassName)&&0<(s=e.fieldGroupClassName.trim()).length&&(o.fieldGroupClassName=s)}b(e.className)&&0<(t=e.className.trim()).length&&(o.className=t);var l=this.getWrappers(e);if(0<l.length){var a=(o.wrappers=l).map(function(e){return r.designerConfig.wrappers[e]}).filter(function(e){return e&&g(e.fields)}).reduce(function(e,t){return e.concat(t.fields)},[]);this.applyProperties(e,o,a)}return o},e.prototype.applyProperties=function(r,n,e){g(e)&&e.forEach(function(e){var t=p.get(r,e.key);null!=t&&(!b(t)||0<t.length)&&t!==e.defaultValue&&p.set(n,e.key,t)})},e.prototype.replaceField=function(e,t,r){if(g(e))for(var n=e.length,i=0;i<n;i++){var o=e[i];if(o===t)return null==r?e.splice(i,1):e[i]=r,!0;if(o.fieldGroup&&this.replaceField(o.fieldGroup,t,r))return!0;if(o.fieldArray&&this.replaceFieldArray(o,t,r))return!0}return!1},e.prototype.replaceFieldArray=function(e,t,r){var n=e.fieldArray;return n===t?(e.fieldArray=r,!0):!(!n.fieldGroup||!this.replaceField(n.fieldGroup,t,r))||n.fieldArray&&this.replaceFieldArray(n,t,r)},e.prototype.buildPath=function(e,t,r){return void 0===r&&(r=!1),t?e+(r?t:"."+t):e},e.prototype.path=function(e,t){void 0===t&&(t=!0);var r="",n=!1;t||(e=(e||{}).parent);for(var i=e,o=(e||{}).parent;o;o=(i=o).parent)if(o instanceof a.FormGroup){for(var s in o.controls)if(o.controls[s]===i){r=this.buildPath(s,r,n),n=!1;break}}else if(o instanceof a.FormArray)for(var l=0;l<o.length;l++)if(o.at(l)===i){r=this.buildPath("["+l+"]",r,n),n=!0;break}return r},e.prototype.unsetField=function(e){var t=this;if(e&&(e.fieldArray&&this.unsetField(e.fieldArray),e.fieldGroup&&e.fieldGroup.forEach(function(e){return t.unsetField(e)}),e.formControl)){var r=this.path(e.formControl);p.unset(this.model,r)}},e.prototype.removeControl=function(e){var t=e?e.parent:undefined;if(t instanceof a.FormGroup){for(var r in t.controls)if(t.controls[r]===e)return void t.removeControl(r)}else if(t instanceof a.FormArray)for(var n=0;n<t.length;n++)if(t.at(n)===e)return void t.removeAt(n)},e.decorators=[{type:s.Injectable}],e.ctorParameters=function(){return[{type:u},{type:C},{type:n.FormlyConfig}]},e}(),F=function(l){function e(e,t,r,n,i,o){var s=l.call(this)||this;return s.changeDetector=e,s.designerConfig=t,s.elementRef=r,s.fieldsService=n,s.formlyDesignerService=i,s.zone=o,s.editing=!1,s.fieldEdit=new a.FormControl({}),s.fieldWrappers=[],s.wrappers=[],s}return d(e,l),e.prototype.ngOnInit=function(){this.type=this.field.type,this.wrappers=Object.getOwnPropertyNames(this.designerConfig.wrappers),this.fieldWrappers=this.formlyDesignerService.getWrappers(this.formlyDesignerService.convertField(this.field))||[]},e.prototype.ngAfterContentInit=function(){var e=this;this.zone.runOutsideAngular(function(){return setTimeout(function(){return e.checkDesigner()})})},e.prototype.ngAfterContentChecked=function(){var e=this;this.zone.runOutsideAngular(function(){return setTimeout(function(){return e.checkDesigner()})})},Object.defineProperty(e.prototype,"disabled",{get:function(){return this.formlyDesignerService.disabled},enumerable:!0,configurable:!0}),e.prototype.addWrapper=function(e){var t=p.cloneDeep(this.field);t.wrappers?t.wrappers.push(e):t.wrappers=[e],this.formlyDesignerService.updateField(this.field,t)},e.prototype.removeWrapper=function(e){var t=p.cloneDeep(this.field);this.fieldWrappers.splice(e,1),t.wrappers=this.fieldWrappers,this.formlyDesignerService.updateField(this.field,t)},e.prototype.edit=function(){this.editing=!0,this.formlyDesignerService.disabled=!0,this.fieldEdit.setValue(this.formlyDesignerService.convertField(p.cloneDeep(this.field)))},e.prototype.remove=function(){this.formlyDesignerService.removeField(this.field)},e.prototype.accept=function(){var e=this;this.fieldsService.checkField(this.fieldEdit.value,this.formlyDesignerService.fields)&&o.timer().subscribe(function(){e.formlyDesignerService.updateField(e.field,e.fieldEdit.value),e.formlyDesignerService.disabled=!1,e.editing=!1})},e.prototype.cancel=function(){this.formlyDesignerService.disabled=!1,this.editing=!1},e.prototype.checkDesigner=function(){var e=this.elementRef.nativeElement;if(null!=e.parentNode){var t=null==e.querySelector("formly-designer-wrapper");t!==e.classList.contains("designerEmpty")&&(this.changeDetector.detectChanges(),t?e.classList.add("designerEmpty"):e.classList.remove("designerEmpty"))}},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-field-wrapper",template:'\n        <div *ngIf="!editing" class="bg-info text-white control-panel">\n            <span class="type">{{ type }}</span>\n            <div class="btn-group">\n                <button type="button" class="btn" data-toggle="dropdown"\n                    aria-haspopup="true" aria-expanded="false" title="wrappers">\n                    <i class="fa fa-clone" aria-hidden="true"></i>\n                </button>\n                <div class="dropdown-menu dropdown-menu-right">\n                    <button class="dropdown-item" type="button" [disabled]="disabled" title="add wrapper"\n                        *ngFor="let wrapper of wrappers" (click)="addWrapper(wrapper)">\n                        {{ wrapper }}\n                    </button>\n                    <ng-container *ngIf="fieldWrappers.length">\n                        <div *ngIf="wrappers.length" class="dropdown-divider"></div>\n                        <button class="dropdown-item" type="button" [disabled]="disabled"\n                            *ngFor="let wrapper of fieldWrappers; let i=index" (click)="removeWrapper(i)">\n                            {{ wrapper }}&nbsp;&nbsp;<i class="fa fa-times" aria-hidden="true" title="remove wrapper"></i>\n                        </button>\n                    </ng-container>\n                </div>\n            </div>\n            <button class="btn" type="button" [disabled]="disabled" (click)="edit()">\n                <i class="fa fa-pencil" aria-hidden="true" title="edit"></i>\n            </button>\n            <button class="btn" type="button" [disabled]="disabled" (click)="remove()">\n                <i class="fa fa-times" aria-hidden="true" title="remove"></i>\n            </button>\n        </div>\n        <div class="content">\n            <div class="editor" [hidden]="!editing">\n                <formly-designer-field-editor #editor [hasContent]="true" [showType]="true" [showWrappers]="true" [formControl]="fieldEdit">\n                    <div class="footer">\n                        <button (click)="cancel()" class="btn btn-secondary mr-1">Cancel</button>\n                        <button [disabled]="editor.invalid" (click)="accept()" class="btn btn-primary">Apply</button>\n                    </div>\n                </formly-designer-field-editor>\n            </div>\n            <div [hidden]="editing">\n                <ng-template #fieldComponent></ng-template>\n            </div>\n        </div>\n    ',styles:["\n        :host {\n            display: flex;\n            position: relative;\n            justify-content: flex-start;\n            align-content: flex-start;\n            align-items: flex-start;\n            margin: .25em;\n        }\n        :host.designerEmpty {\n            display:none;\n        }\n        .btn:not(:disabled), .dropdown-item:not(:disabled) {\n            cursor: pointer;\n        }\n        .control-panel {\n            font-size: .8em;\n            position: absolute;\n            padding: 0 0 0 .5em;\n            border-radius: 0 5px 0 0;\n            right: 0;\n            top: 0;\n        }\n        .control-panel > * {\n            padding-right: .5em;\n        }\n        .control-panel .btn {\n            font-size: unset;\n            background-color: unset;\n            padding: 0 .5em 0 0;\n            color: #fff;\n        }\n        .content {\n            border: 1px dashed #000;\n            border-radius: 5px;\n            min-height: 2em;\n            padding: 1.5em 1em 0 1em;\n            width: 100%;\n        }\n        .content:first-child {\n            padding-top: 0;\n        }\n        .editor {\n            margin: 1em 0;\n        }\n        .footer {\n            display: flex;\n            justify-content: flex-end;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:s.ChangeDetectorRef},{type:u},{type:s.ElementRef},{type:C},{type:w},{type:s.NgZone}]},e.propDecorators={fieldComponent:[{type:s.ViewChild,args:["fieldComponent",{read:s.ViewContainerRef}]}]},e}(n.FieldWrapper),D=function(l){function e(e,t,r,n,i,o){var s=l.call(this)||this;return s.changeDetector=e,s.designerConfig=t,s.elementRef=r,s.fieldsService=n,s.formlyDesignerService=i,s.zone=o,s.editing=!1,s.fieldEdit=new a.FormControl({}),s.fieldWrappers=[],s.wrappers=[],s}return d(e,l),e.prototype.ngOnInit=function(){this.field.templateOptions.$fieldArray?this.type=this.field.templateOptions.$fieldArray.type||"fieldArray":this.field.type?this.type=this.field.type:this.field.fieldGroup&&(this.type="fieldGroup"),this.wrappers=Object.getOwnPropertyNames(this.designerConfig.wrappers),this.fieldWrappers=this.formlyDesignerService.convertField(this.field).wrappers||[]},e.prototype.ngAfterContentInit=function(){var e=this;this.zone.runOutsideAngular(function(){return setTimeout(function(){return e.checkDesigner()})})},e.prototype.ngAfterContentChecked=function(){var e=this;this.zone.runOutsideAngular(function(){return setTimeout(function(){return e.checkDesigner()})})},Object.defineProperty(e.prototype,"disabled",{get:function(){return this.formlyDesignerService.disabled},enumerable:!0,configurable:!0}),e.prototype.addWrapper=function(e){var t=p.cloneDeep(this.field);t.wrappers?t.wrappers.push(e):t.wrappers=[e],this.formlyDesignerService.updateField(this.field,t)},e.prototype.removeWrapper=function(e){var t=p.cloneDeep(this.field);this.fieldWrappers.splice(e,1),t.wrappers=this.fieldWrappers,this.formlyDesignerService.updateField(this.field,t)},e.prototype.edit=function(){this.editing=!0,this.formlyDesignerService.disabled=!0,this.fieldEdit.setValue(this.formlyDesignerService.convertField(p.cloneDeep(this.field)))},e.prototype.remove=function(){this.formlyDesignerService.removeField(this.field)},e.prototype.accept=function(){var e=this;this.fieldsService.checkField(this.fieldEdit.value,this.formlyDesignerService.fields)&&o.timer().subscribe(function(){e.formlyDesignerService.updateField(e.field,e.fieldEdit.value),e.formlyDesignerService.disabled=!1,e.editing=!1})},e.prototype.cancel=function(){this.formlyDesignerService.disabled=!1,this.editing=!1},e.prototype.onFieldSelected=function(e){var t=this;if(!g(this.field.fieldGroup)||this.fieldsService.checkField(e,this.formlyDesignerService.fields,this.field)){var r=p.cloneDeep(this.field);r.fieldGroup=g(r.fieldGroup)?r.fieldGroup.slice():[],r.fieldGroup.push(e),o.timer().pipe(i.tap(function(){return t.formlyDesignerService.updateField(t.field,r)}),i.catchError(function(){return o.NEVER})).subscribe()}},e.prototype.checkDesigner=function(){var e=this.elementRef.nativeElement;if(null!=e.parentNode){var t=null==e.querySelector("formly-designer-wrapper");t!==e.classList.contains("designerEmpty")&&(this.changeDetector.detectChanges(),t?e.classList.add("designerEmpty"):e.classList.remove("designerEmpty"))}},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-field-group-wrapper",template:'\n        <div *ngIf="!editing" class="bg-info text-white control-panel">\n            <span class="type">{{ type }}</span>\n            <div class="btn-group">\n                <button type="button" class="btn" data-toggle="dropdown"\n                    aria-haspopup="true" aria-expanded="false" title="wrappers">\n                    <i class="fa fa-clone" aria-hidden="true"></i>\n                </button>\n                <div class="dropdown-menu dropdown-menu-right">\n                    <button class="dropdown-item" type="button" [disabled]="disabled" title="add wrapper"\n                        *ngFor="let wrapper of wrappers" (click)="addWrapper(wrapper)">\n                        {{ wrapper }}\n                    </button>\n                    <ng-container *ngIf="fieldWrappers.length">\n                        <div *ngIf="wrappers.length" class="dropdown-divider"></div>\n                        <button class="dropdown-item" type="button" [disabled]="disabled"\n                            *ngFor="let wrapper of fieldWrappers; let i=index" (click)="removeWrapper(i)">\n                            {{ wrapper }}&nbsp;&nbsp;<i class="fa fa-times" aria-hidden="true" title="remove wrapper"></i>\n                        </button>\n                    </ng-container>\n                </div>\n            </div>\n            <button [disabled]="disabled" type="button" class="btn" (click)="edit()">\n                <i class="fa fa-pencil" aria-hidden="true" title="edit"></i>\n            </button>\n            <button [disabled]="disabled" type="button" class="btn" (click)="remove()">\n                <i class="fa fa-times" aria-hidden="true" title="remove"></i>\n            </button>\n        </div>\n        <div class="content">\n            <div [hidden]="!editing">\n                <formly-designer-field-editor #editor [fieldGroup]="true" [hasContent]="true" [showWrappers]="true"\n                    [formControl]="fieldEdit">\n                    <div class="footer">\n                        <button (click)="cancel()" class="btn btn-secondary mr-1">Cancel</button>\n                        <button [disabled]="editor.invalid" (click)="accept()" class="btn btn-primary">Apply</button>\n                    </div>\n                </formly-designer-field-editor>\n            </div>\n            <div [hidden]="editing">\n                <div class="form-group">\n                    <label>child</label>\n                    <formly-designer-field-picker (selected)="onFieldSelected($event)"></formly-designer-field-picker>\n                </div>\n                <ng-template #fieldComponent></ng-template>\n            </div>\n        </div>\n    ',styles:["\n        :host {\n            display: flex;\n            position: relative;\n            justify-content: flex-start;\n            align-content: flex-start;\n            align-items: flex-start;\n            margin: .25em;\n        }\n        :host.designerEmpty {\n            display:none;\n        }\n        .btn:not(:disabled), .dropdown-item:not(:disabled) {\n            cursor: pointer;\n        }\n        .control-panel {\n            font-size: .8em;\n            position: absolute;\n            padding: 0 0 0 .5em;\n            border-radius: 0 5px 0 0;\n            right: 0;\n            top: 0;\n        }\n        .control-panel > * {\n            padding-right: .5em;\n        }\n        .control-panel .btn {\n            font-size: unset;\n            background-color: unset;\n            padding: 0 .5em 0 0;\n            color: #fff;\n        }\n        .content {\n            border: 1px dashed #000;\n            border-radius: 5px;\n            padding: 1em;\n            width: 100%;\n        }\n        .footer {\n            display: flex;\n            justify-content: flex-end;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:s.ChangeDetectorRef},{type:u},{type:s.ElementRef},{type:C},{type:w},{type:s.NgZone}]},e.propDecorators={fieldComponent:[{type:s.ViewChild,args:["fieldComponent",{read:s.ViewContainerRef}]}]},e}(n.FieldWrapper),S=function(){function e(){}return e.prototype.isNonDesignerField=function(e){return e&&(!e.templateOptions||!0!==e.templateOptions.$designerField)},e.prototype.run=function(e){var t=this;e.templateManipulators.preWrapper.push(function(e){if(t.isNonDesignerField(e))return e.fieldGroup?"fieldGroupDesigner":"fieldDesigner"}),e.templateManipulators.postWrapper.push(function(e){if(t.isNonDesignerField(e))return"designer"})},e}(),k=[],E=[t,F,D],O={wrappers:[{name:"designer",component:t},{name:"fieldDesigner",component:F},{name:"fieldGroupDesigner",component:D}],manipulators:[{"class":S,method:"run"}]},A=function(){function e(e,t,r){this.fieldsService=e,this.formBuilder=t,this.formlyDesignerService=r,this.fieldsChange=new s.EventEmitter,this.modelChange=new s.EventEmitter,this.types=[],this.wrappers=[],this.properties=[],this.debugFields=[],this.options={},this.subscriptions=[]}return Object.defineProperty(e.prototype,"disabled",{get:function(){return this.formlyDesignerService.disabled},set:function(e){this.formlyDesignerService.disabled=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields",{get:function(){return this.formlyDesignerService.fields},set:function(e){var t=this.formlyDesignerService.convertFields(e);this.fieldsService.mutateFields(t,!1),this.formlyDesignerService.fields=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"model",{get:function(){return this.formlyDesignerService.model},set:function(e){this.formlyDesignerService.model=e},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;this.form=this.formBuilder.group({}),this.subscriptions.push(this.formlyDesignerService.fields$.subscribe(function(){e.form=e.formBuilder.group({}),e.fieldsChange.emit(e.formlyDesignerService.createDesignerFields())})),this.subscriptions.push(o.merge(this.formlyDesignerService.model$,this.form.valueChanges).pipe(i.debounceTime(50)).subscribe(function(){return e.modelChange.emit(e.formlyDesignerService.model)}))},e.prototype.ngOnDestroy=function(){this.subscriptions.splice(0).forEach(function(e){return e.unsubscribe()})},e.prototype.onFieldSelected=function(e){var t=this;o.timer().pipe(i.tap(function(){t.fieldsService.checkField(e,t.formlyDesignerService.fields)&&t.formlyDesignerService.addField(e)}),i.catchError(function(){return o.NEVER})).subscribe()},e.decorators=[{type:s.Component,args:[{selector:"formly-designer",template:'\n        <formly-designer-field-picker (selected)="onFieldSelected($event)">\n        </formly-designer-field-picker>\n        <form novalidate [formGroup]="form">\n            <formly-form [options]="options" [model]="formlyDesignerService.model" [form]="form" [fields]="formlyDesignerService.fields">\n            </formly-form>\n        </form>\n        \x3c!--<div>\n            Designer Fields Debug:\n            <pre>{{ fields | decycle | json }}</pre>\n        </div>--\x3e\n    ',encapsulation:s.ViewEncapsulation.None,providers:[w],styles:["\n        formly-designer-field-picker .form-group > .input-group > formly-designer-type-select > select {\n            border-radius: .25rem 0 0 .25rem;\n            border-right: 0;\n        }\n        formly-designer-wrapper-editor .card > .card-body .form-control {\n            width: 100%;\n        }\n        formly-designer-wrapper-picker .form-group > .input-group > formly-designer-wrapper-select > select {\n            border-radius: .25rem 0 0 .25rem;\n            border-right: 0;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:C},{type:a.FormBuilder},{type:w}]},e.propDecorators={formlyFormContainer:[{type:s.ViewChild,args:["formlyFormContainer",{read:s.ViewContainerRef}]}],fieldsChange:[{type:s.Output}],modelChange:[{type:s.Output}],disabled:[{type:s.Input}],fields:[{type:s.Input}],model:[{type:s.Input}]},e}(),G={provide:a.NG_VALUE_ACCESSOR,useExisting:s.forwardRef(function(){return N}),multi:!0},N=function(){function e(e,t,r){var n=this;this.fieldsService=e,this.fb=t,this.formlyDesignerConfig=r,this.subscriptions=[],this.field={},this.fields=[],this.onChange=function(e){},this.onTouched=function(){},this.form=t.group({key:this.key=t.control(""),className:this.className=t.control(""),fieldGroupClassName:this.fieldGroupClassName=t.control(""),type:this.type=t.control("")},{validator:function(e){return n.validator(e)}}),this.fieldForm=t.group({})}return e.prototype.ngOnInit=function(){var e=this;this.subscriptions.push(this.type.valueChanges.subscribe(function(){return e.onTypeChange()})),this.subscriptions.push(this.form.statusChanges.pipe(i.debounceTime(0)).subscribe(function(){return e.invalid=e.form.invalid})),this.subscribeValueChanges()},e.prototype.ngOnDestroy=function(){this.valueChangesSubscription.unsubscribe(),this.subscriptions.splice(0).forEach(function(e){return e.unsubscribe()})},e.prototype.writeValue=function(e){this.valueChangesSubscription.unsubscribe(),this.updateField(e),this.form.markAsPristine(),this.form.markAsUntouched(),this.subscribeValueChanges()},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){e?this.form.disable():this.form.enable()},e.prototype.subscribeValueChanges=function(){var e=this;this.valueChangesSubscription=o.merge(this.fieldForm.valueChanges,this.form.valueChanges).pipe(i.debounceTime(0)).subscribe(function(){return e.updateValue()})},e.prototype.updateField=function(e){v(e)||(e={}),this.key.setValue(b(e.key)?e.key:""),this.className.setValue(b(e.className)?e.className:""),this.fieldGroupClassName.setValue(b(e.fieldGroupClassName)?e.fieldGroupClassName:""),this.type.setValue(b(e.type)?e.type:""),this.fields=this.fieldsService.getTypeFields(this.type.value),this.fieldForm=this.fb.group({}),this.field=p.cloneDeep(e)},e.prototype.updateValue=function(){if(this.onChange){var e=this.field;e.key=this.key.value,e.className=this.className.value,e.fieldGroupClassName=this.fieldGroupClassName.value,e.type=this.type.value,this.onChange(e)}},e.prototype.onTypeChange=function(){this.valueChangesSubscription.unsubscribe();var e=this.type.value;this.fields=this.fieldsService.getTypeFields(e);var t=this.formlyDesignerConfig.types[e];this.fieldArray=t&&t.fieldArray,this.fieldForm=this.fb.group({}),this.field=Object.assign({},this.field),this.subscribeValueChanges()},e.prototype.onWrappersSelected=function(e){this.updateField(e)},e.prototype.validator=function(e){var t=e.get("type"),r=b(t.value)&&0<t.value.trim().length,n=e.get("key"),i={key:!1,type:this.showType&&!r,conflict:!1};return!r||b(n.value)&&0!==n.value.trim().length||(i.key=!0),i.key||i.type?i:null},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-field-editor",template:'\n        <form [formGroup]="form" novalidate>\n            <div class="card">\n                <div class="card-header" [ngClass]="{solo: !hasContent && fields.length === 0}">\n                    <div class="form-group" [ngClass]="{\'has-danger\': form.hasError(\'key\') && (key.dirty || key.touched)}">\n                        <label class="form-control-label">key</label>\n                        <input formControlName="key" class="form-control">\n                        <div *ngIf="form.hasError(\'key\') && (key.dirty || key.touched)" class="form-control-feedback">\n                            key required.\n                        </div>\n                    </div>\n                    <div *ngIf="formlyDesignerConfig.settings.showClassName" class="form-group">\n                        <label class="form-control-label">className</label>\n                        <input formControlName="className" class="form-control">\n                    </div>\n                    <div *ngIf="fieldGroup && formlyDesignerConfig.settings.showClassName" class="form-group">\n                        <label class="form-control-label">fieldGroupClassName</label>\n                        <input formControlName="fieldGroupClassName" class="form-control">\n                    </div>\n                    <div *ngIf="showType" class="form-group"\n                        [ngClass]="{\'has-danger\': form.hasError(\'type\') && (type.dirty || type.touched)}">\n                        <label class="form-control-label">type</label>\n                        <formly-designer-type-select formControlName="type"></formly-designer-type-select>\n                        <div *ngIf="form.hasError(\'type\') && (type.dirty || type.touched)" class="form-control-feedback">\n                            type required.\n                        </div>\n                    </div>\n                    <div *ngIf="showWrappers" class="form-group">\n                        <label class="form-control-label">wrappers</label>\n                        <formly-designer-wrappers-picker [field]="field"\n                            (selected)="onWrappersSelected($event)">\n                        </formly-designer-wrappers-picker>\n                    </div>\n                </div>\n                <div #block class="card-body">\n                    <formly-form *ngIf="fields.length > 0" [form]="fieldForm" [fields]="fields" [model]="field">\n                    </formly-form>\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </form>\n    ',providers:[G],styles:["\n        .card-header.solo {\n            border-bottom: 0;\n        }\n        .card-header.solo + .card-body {\n            display: none;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:C},{type:a.FormBuilder},{type:u}]},e.propDecorators={fieldGroup:[{type:s.Input}],showType:[{type:s.Input}],showWrappers:[{type:s.Input}],hasContent:[{type:s.Input}],blockElRef:[{type:s.ViewChild,args:["block"]}]},e}(),V=function(){function e(e,t){this.formlyDesignerConfig=t,this.selected=new s.EventEmitter,this.fieldEdit=new a.FormControl({}),this.form=e.group({type:this.type=e.control("",a.Validators.compose([a.Validators.required,a.Validators.pattern(/^\s*\S.*$/)]))})}return Object.defineProperty(e.prototype,"$modal",{get:function(){return $(this.modalRef.nativeElement)},enumerable:!0,configurable:!0}),e.prototype.add=function(){var e=this.type.value,t={};"fieldGroup"!==e&&(t.type=e);var r=this.formlyDesignerConfig.types[e]||{};r.fieldArray&&(t.fieldArray={fieldGroup:[]}),(this.fieldGroup="fieldGroup"===e||r.fieldGroup)&&(t.fieldGroup=[]),this.fieldEdit.setValue(t),this.$modal.modal("show")},e.prototype.onApply=function(){this.selected.emit(this.fieldEdit.value),this.$modal.modal("hide")},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-field-picker",template:'\n        <form novalidate [formGroup]="form">\n            <div class="form-group">\n                <div class="input-group">\n                    <formly-designer-type-select formControlName="type">\n                    </formly-designer-type-select>\n                    <button type="button" class="btn btn-secondary" [disabled]="form.invalid" (click)="add()">\n                        Add\n                    </button>\n                </div>\n            </div>\n            <div #modal class="modal fade" tabindex="-1" role="dialog">\n                <div class="modal-dialog modal-lg" role="document">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title">Add {{ type.value }}</h5>\n                            <button type="button" class="close" data-dismiss="modal" aria-label="Cancel">\n                                <span aria-hidden="true">&times;</span>\n                            </button>\n                        </div>\n                        <div class="modal-body">\n                            <formly-designer-field-editor #editor [fieldGroup]="fieldEdit.value.fieldGroup" [formControl]="fieldEdit">\n                            </formly-designer-field-editor>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>\n                            <button type="button" class="btn btn-primary" (click)="onApply()"\n                                [disabled]="editor.invalid">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    ',styles:["\n        .btn:not(:disabled) {\n            cursor: pointer;\n        }\n        .input-group > .btn {\n            border-radius: 0 .25rem .25rem 0;\n        }\n        .input-group, .modal-header {\n            display: flex;\n        }\n        .modal-header {\n            justify-content: space-between;\n        }\n        formly-designer-type-select {\n            flex-grow: 2;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:a.FormBuilder},{type:u}]},e.propDecorators={modalRef:[{type:s.ViewChild,args:["modal"]}],selected:[{type:s.Output}]},e}(),x={provide:a.NG_VALUE_ACCESSOR,useExisting:s.forwardRef(function(){return P}),multi:!0},P=function(){function e(e){this.formlyDesignerConfig=e,this.formControl=new a.FormControl,this.onChange=function(e){},this.onTouched=function(){}}return e.prototype.ngAfterViewInit=function(){var e=this;o.timer().subscribe(function(){e.types=Object.keys(e.formlyDesignerConfig.types),0<e.types.length&&e.formControl.setValue(e.types[0]),e.types.push("fieldGroup")})},e.prototype.ngOnInit=function(){var t=this;this.valueChangesSubscription=this.formControl.valueChanges.subscribe(function(e){t.onChange&&t.onChange(e)})},e.prototype.ngOnDestroy=function(){this.valueChangesSubscription.unsubscribe()},e.prototype.writeValue=function(e){this.formControl.setValue(e)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){e?this.formControl.disable():this.formControl.enable()},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-type-select",template:'\n        <select [formControl]="formControl" class="custom-select">\n            <option *ngFor="let type of types" [ngValue]="type">{{ type }}</option>\n        </select>\n    ',providers:[x],styles:["\n        select {\n            width: 100%;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:u}]},e}(),j={provide:a.NG_VALUE_ACCESSOR,useExisting:s.forwardRef(function(){return W}),multi:!0},W=function(){function e(e,t){this.fieldsService=e,this.formBuilder=t,this.subscriptions=[],this.fields=[],this.onChange=function(e){},this.onTouched=function(){},this.fieldForm=t.group({})}return e.prototype.ngOnInit=function(){var e=this;this.subscriptions.push(this.fieldForm.statusChanges.pipe(i.switchMap(function(){return o.timer()})).subscribe(function(){return e.invalid=e.fieldForm.invalid})),this.subscribeValueChanges()},e.prototype.ngOnDestroy=function(){this.valueChangesSubscription.unsubscribe(),this.subscriptions.splice(0).forEach(function(e){return e.unsubscribe()})},e.prototype.ngOnChanges=function(e){e.wrapper&&(this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.fields=this.fieldsService.getWrapperFields(this.wrapper),this.fieldForm=this.formBuilder.group({}),this.field=Object.assign({},this.field),this.valueChangesSubscription&&this.subscribeValueChanges())},e.prototype.writeValue=function(e){this.valueChangesSubscription.unsubscribe(),v(e)||(e={}),this.fields=this.fieldsService.getWrapperFields(this.wrapper),this.fieldForm=this.formBuilder.group({}),this.field=p.cloneDeep(e),this.subscribeValueChanges()},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){e?this.fieldForm.disable():this.fieldForm.enable()},e.prototype.subscribeValueChanges=function(){var e=this;this.valueChangesSubscription=this.fieldForm.valueChanges.pipe(i.debounceTime(0)).subscribe(function(){return e.updateValue()})},e.prototype.updateValue=function(){this.onChange&&this.onChange(this.field)},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-wrapper-editor",template:'\n        <form [formGroup]="fieldForm" novalidate>\n            <div class="card">\n                <div class="card-body">\n                    <formly-form [form]="fieldForm" [fields]="fields" [model]="field">\n                    </formly-form>\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </form>\n    ',providers:[j]}]}],e.ctorParameters=function(){return[{type:C},{type:a.FormBuilder}]},e.propDecorators={wrapper:[{type:s.Input}]},e}(),I={provide:a.NG_VALUE_ACCESSOR,useExisting:s.forwardRef(function(){return _}),multi:!0},_=function(){function e(e){this.formlyDesignerConfig=e,this.formControl=new a.FormControl,this.onChange=function(e){},this.onTouched=function(){}}return e.prototype.ngAfterViewInit=function(){var e=this;o.timer().subscribe(function(){e.wrappers=Object.keys(e.formlyDesignerConfig.wrappers),0<e.wrappers.length&&e.formControl.setValue(e.wrappers[0])})},e.prototype.ngOnInit=function(){var t=this;this.valueChangesSubscription=this.formControl.valueChanges.subscribe(function(e){t.onChange&&t.onChange(e)})},e.prototype.ngOnDestroy=function(){this.valueChangesSubscription.unsubscribe()},e.prototype.writeValue=function(e){this.formControl.setValue(e)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){e?this.formControl.disable():this.formControl.enable()},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-wrapper-select",template:'\n        <select [formControl]="formControl" class="custom-select">\n            <option *ngFor="let wrapper of wrappers" [ngValue]="wrapper">{{ wrapper }}</option>\n        </select>\n    ',providers:[I],styles:["\n        select {\n            width: 100%;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:u}]},e}(),T=function(){function e(e,t,r){this.formBuilder=e,this.formlyDesignerConfig=t,this.formlyDesignerService=r,this.selected=new s.EventEmitter,this.fieldEdit=new a.FormControl({})}return Object.defineProperty(e.prototype,"wrapper",{get:function(){return this.form.get("wrapper").value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"$modal",{get:function(){return $(this.modalRef.nativeElement)},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.form=this.formBuilder.group({wrapper:["",a.Validators.compose([a.Validators.required,a.Validators.pattern(/^\s*\S.*$/)])]})},e.prototype.add=function(){if(v(this.field)){var e=p.cloneDeep(this.field);g(e.wrappers)&&0<e.wrappers.length?e.wrappers.splice(e.wrappers.length-1,0,this.wrapper):e.wrappers=[this.wrapper],this.fieldEdit.setValue(e);var t=this.formlyDesignerConfig.wrappers[this.wrapper].fields;g(t)&&0<t.length?this.$modal.modal("show"):this.onApply()}},e.prototype.onApply=function(){this.field=this.formlyDesignerService.convertField(this.fieldEdit.value),this.selected.emit(this.fieldEdit.value),this.$modal.modal("hide")},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-wrapper-picker",template:'\n        <form novalidate [formGroup]="form">\n            <div class="form-group">\n                <div class="input-group">\n                    <formly-designer-wrapper-select formControlName="wrapper">\n                    </formly-designer-wrapper-select>\n                    <button type="button" class="btn btn-secondary" [disabled]="form.invalid" (click)="add()">\n                        Add\n                    </button>\n                </div>\n            </div>\n            <div #modal class="modal fade" tabindex="-1" role="dialog">\n                <div class="modal-dialog modal-lg" role="document">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title">Add {{ wrapper }}</h5>\n                            <button type="button" class="close" data-dismiss="modal" aria-label="Cancel">\n                                <span aria-hidden="true">&times;</span>\n                            </button>\n                        </div>\n                        <div class="modal-body">\n                            <formly-designer-wrapper-editor #editor [formControl]="fieldEdit" [wrapper]="wrapper">\n                            </formly-designer-wrapper-editor>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>\n                            <button type="button" class="btn btn-primary" (click)="onApply()"\n                                [disabled]="editor.invalid">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    ',styles:["\n        :host {\n            width: inherit;\n        }\n        .btn:not(:disabled) {\n            cursor: pointer;\n        }\n        .input-group > .btn {\n            border-radius: 0 .25rem .25rem 0;\n        }\n        .input-group, .modal-header {\n            display: flex;\n        }\n        .modal-header {\n            justify-content: space-between;\n        }\n        formly-designer-wrapper-select {\n            flex-grow: 2;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:a.FormBuilder},{type:u},{type:w}]},e.propDecorators={modalRef:[{type:s.ViewChild,args:["modal"]}],field:[{type:s.Input}],selected:[{type:s.Output}]},e}(),R=function(){function e(e,t){this.formlyDesignerConfig=e,this.formlyDesignerService=t,this.selected=new s.EventEmitter,this.fieldEdit=new a.FormControl({}),this.wrappers=[]}return e.prototype.ngOnChanges=function(e){e.field&&(this.wrappers=this.formlyDesignerService.getWrappers(e.field.currentValue))},Object.defineProperty(e.prototype,"$modal",{get:function(){return $(this.modalRef.nativeElement)},enumerable:!0,configurable:!0}),e.prototype.onWrapperSelected=function(e){this.selected.emit(e)},e.prototype.edit=function(e){if(this.wrapper=this.wrappers[e],v(this.field)){var t=p.cloneDeep(this.field);if(g(t.wrappers)){this.fieldEdit.setValue(t);var r=this.formlyDesignerConfig.wrappers[this.wrapper].fields;g(r)&&0<r.length?this.$modal.modal("show"):this.onApply()}}},e.prototype.remove=function(e){var t=this.field.wrappers.indexOf(this.wrappers[e]);if(!(t<0)){var r=p.cloneDeep(this.field);r.wrappers.splice(t,1),this.field=this.formlyDesignerService.convertField(r),this.selected.emit(this.field)}},e.prototype.onApply=function(){this.field=this.formlyDesignerService.convertField(this.fieldEdit.value),this.selected.emit(this.field),this.$modal.modal("hide")},e.decorators=[{type:s.Component,args:[{selector:"formly-designer-wrappers-picker",template:'\n        <div class="form-group">\n            <div class="input-group">\n                <formly-designer-wrapper-picker [field]="field" (selected)="onWrapperSelected($event)">\n                </formly-designer-wrapper-picker>\n            </div>\n            <div *ngFor="let wrapper of wrappers; let i = index" class="badge badge-default noselect" (click)="edit(i)">\n                {{ wrapper }}&nbsp;&nbsp;<i class="fa fa-times" aria-hidden="true" (click)="remove(i)"></i>\n            </div>\n        </div>\n        <div #modal class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-lg" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">Edit {{ wrapper }}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Cancel">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n                    <div class="modal-body">\n                        <formly-designer-wrapper-editor #editor [formControl]="fieldEdit" [wrapper]="wrapper">\n                        </formly-designer-wrapper-editor>\n                    </div>\n                    <div class="modal-footer">\n                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>\n                        <button type="button" class="btn btn-primary" (click)="onApply()"\n                            [disabled]="editor.invalid">Apply</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ',styles:["\n        .badge {\n            margin-right: .25em;\n        }\n        .badge {\n            cursor: pointer;\n        }\n        .noselect {\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n    "]}]}],e.ctorParameters=function(){return[{type:u},{type:w}]},e.propDecorators={modalRef:[{type:s.ViewChild,args:["modal"]}],field:[{type:s.Input}],selected:[{type:s.Output}]},e}();function M(e){if(null==e)return e;var n=1,i=new Map;return q(p.cloneDeep(e),function(e,t){if(v(t)){if(i.has(t)){var r=i.get(t);return r||(t.$id=r=n++,i.set(t,r)),{$ref:r}}i.set(t,0)}})}function q(e,t){if(g(e))for(var r=0;r<e.length;r++)B.bind(e,r,e[r],t)();else if(v(e))for(var n in e)e.hasOwnProperty(n)&&B.bind(e,n,e[n],t)();return e}function B(e,t,r){var n=r(e,t);n===undefined?q(t,r):this[e]=n}var L=function(){function e(){}return e.prototype.transform=function(e){return M(e)},e.decorators=[{type:s.Pipe,args:[{name:"decycle"}]}],e}(),z=function(){function t(e){e.addConfig(O)}return t.forRoot=function(e){return void 0===e&&(e={}),{ngModule:t,providers:[{provide:s.ANALYZE_FOR_ENTRY_COMPONENTS,useValue:[k,E],multi:!0},{provide:c,useValue:e,multi:!0}]}},t.decorators=[{type:s.NgModule,args:[{declarations:[N,V,A,P,W,_,T,R,L,k,E],imports:[r.CommonModule,a.FormsModule,a.ReactiveFormsModule,n.FormlyModule.forChild()],exports:[A],providers:[u,C],entryComponents:[n.FormlyForm]}]}],t.ctorParameters=function(){return[{type:n.FormlyConfig}]},t}();e.fieldComponents=k,e.wrapperComponents=E,e.config=O,e.FieldsService=C,e.FORMLY_DESIGNER_CONFIG_TOKEN=c,e.FormlyDesignerConfig=u,e.FormlyDesignerService=w,e.FormlyDesignerComponent=A,e.FormlyDesignerModule=z,e.decycle=M,e.ɵe=N,e.ɵf=V,e.ɵg=P,e.ɵh=W,e.ɵj=T,e.ɵi=_,e.ɵk=R,e.ɵl=L,e.ɵd=S,e.ɵa=t,e.ɵb=F,e.ɵc=D,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-designer.umd.min.js.map